<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>哈希链表</title>
      <link href="/posts/ee05.html"/>
      <url>/posts/ee05.html</url>
      
        <content type="html"><![CDATA[<h2 id="哈希链表的实现"><a href="#哈希链表的实现" class="headerlink" title="哈希链表的实现"></a>哈希链表的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V val;</span><br><span class="line">        Node&lt;K, V&gt; next, prev;</span><br><span class="line"></span><br><span class="line">        Node(K key, V val) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K, V&gt; head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;K, Node&lt;K, V&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V val)</span> &#123;</span><br><span class="line">        <span class="comment">// 若为新插入的节点，则同时插入链表和 map</span></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 插入新的 Node</span></span><br><span class="line">            Node&lt;K, V&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, val);</span><br><span class="line">            addLastNode(node);</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若存在，则替换之前的 val</span></span><br><span class="line">        map.get(key).val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="comment">// 若 key 本不存在，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若 key 存在，则需要同时在哈希表和链表中删除</span></span><br><span class="line">        Node&lt;K, V&gt; node = map.get(key);</span><br><span class="line">        map.remove(key);</span><br><span class="line">        removeNode(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;K&gt; <span class="title function_">keys</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;K&gt; keyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K, V&gt; p = head.next; p != tail; p = p.next) &#123;</span><br><span class="line">            keyList.add(p.key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addLastNode</span><span class="params">(Node&lt;K, V&gt; x)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; temp = tail.prev;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; tail</span></span><br><span class="line"></span><br><span class="line">        x.next = tail;</span><br><span class="line">        x.prev = temp;</span><br><span class="line">        <span class="comment">// temp &lt;- x -&gt; tail</span></span><br><span class="line"></span><br><span class="line">        temp.next = x;</span><br><span class="line">        tail.prev = x;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; x &lt;-&gt; tail</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node&lt;K, V&gt; x)</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; prev = x.prev;</span><br><span class="line">        Node&lt;K, V&gt; next = x.next;</span><br><span class="line">        <span class="comment">// prev &lt;-&gt; x &lt;-&gt; next</span></span><br><span class="line"></span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line"></span><br><span class="line">        x.next = x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyLinkedHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">MyLinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;e&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map.keys()); <span class="comment">// [a, b, c, d, e]</span></span><br><span class="line">        map.remove(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(map.keys()); <span class="comment">// [a, b, d, e]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的！我来用最简单的方式解释这段代码，就像给完全不懂编程的朋友讲解一样：</p><hr><h3 id="代码功能：实现一个能记录插入顺序的「智能字典」"><a href="#代码功能：实现一个能记录插入顺序的「智能字典」" class="headerlink" title="代码功能：实现一个能记录插入顺序的「智能字典」"></a>代码功能：实现一个能记录插入顺序的「智能字典」</h3><p>想象你有一个笔记本（哈希表）和一个手链（双向链表）：</p><ul><li><strong>笔记本</strong>可以快速翻到某一页找到东西（快速查找）</li><li><strong>手链</strong>的珠子按你放进去的顺序排列（记录插入顺序）</li></ul><p>这个 <code>MyLinkedHashMap</code> 就是把这两个东西结合起来的神奇盒子！</p><hr><h3 id="核心结构解析"><a href="#核心结构解析" class="headerlink" title="核心结构解析"></a>核心结构解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    K key;    <span class="comment">// 钥匙（比如姓名）</span></span><br><span class="line">    V val;    <span class="comment">// 宝藏（比如年龄）</span></span><br><span class="line">    Node&lt;K, V&gt; next, prev; <span class="comment">// 前后珠子（双向链接）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个「珠子」保存着钥匙和宝藏，还能知道前一个珠子和后一个珠子是谁。</p><hr><h3 id="两个核心工具"><a href="#两个核心工具" class="headerlink" title="两个核心工具"></a>两个核心工具</h3><ol><li><p><strong>哈希表（快速查找的笔记本）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;K, Node&lt;K, V&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>作用：通过钥匙（如 “Alice”）立刻找到对应的珠子</li><li>速度：像查字典一样快，不用一个个翻找</li></ul></li><li><p><strong>双向链表（记录顺序的手链）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -&gt; 珠子A &lt;-&gt; 珠子B &lt;-&gt; 珠子C &lt;-&gt; tail</span><br></pre></td></tr></table></figure><ul><li><code>head</code> 和 <code>tail</code> 是固定不变的起点和终点</li><li>每次新增珠子都挂在手链末端（保证顺序）</li></ul></li></ol><hr><h3 id="关键操作解析"><a href="#关键操作解析" class="headerlink" title="关键操作解析"></a>关键操作解析</h3><h4 id="1️⃣-放入宝物（put）"><a href="#1️⃣-放入宝物（put）" class="headerlink" title="1️⃣ 放入宝物（put）"></a>1️⃣ 放入宝物（put）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><ul><li>如果钥匙是新的：<ul><li>造一颗新珠子（Alice,25）</li><li>把珠子挂在手链最后</li><li>在笔记本记下：钥匙”Alice”对应这颗珠子</li></ul></li><li>如果是已有钥匙：直接修改珠子的宝藏值</li></ul><h4 id="2️⃣-取出宝物（get）"><a href="#2️⃣-取出宝物（get）" class="headerlink" title="2️⃣ 取出宝物（get）"></a>2️⃣ 取出宝物（get）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.get(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 返回25</span></span><br></pre></td></tr></table></figure><ul><li>直接翻笔记本找到对应珠子，返回宝藏</li></ul><h4 id="3️⃣-删除宝物（remove）"><a href="#3️⃣-删除宝物（remove）" class="headerlink" title="3️⃣ 删除宝物（remove）"></a>3️⃣ 删除宝物（remove）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;Alice&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>从笔记本划掉这一页</li><li>把手链上对应的珠子拆下来，把前后珠子重新连接</li></ul><h4 id="4️⃣-列出所有钥匙（keys）"><a href="#4️⃣-列出所有钥匙（keys）" class="headerlink" title="4️⃣ 列出所有钥匙（keys）"></a>4️⃣ 列出所有钥匙（keys）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(map.keys()); <span class="comment">// [Bob, Charlie, Alice]</span></span><br></pre></td></tr></table></figure><ul><li>按手链上的顺序，从第一个珠子走到最后一个，收集所有钥匙</li></ul><hr><h3 id="为什么需要双向链表？"><a href="#为什么需要双向链表？" class="headerlink" title="为什么需要双向链表？"></a>为什么需要双向链表？</h3><p>想象你有一串珠子：</p><ul><li>如果只有单链（只能往一个方向走），当你需要拆掉中间的珠子时，找不到前面的珠子重新连接</li><li><strong>双向链表</strong>让每个珠子都知道前后邻居，可以快速调整连接关系</li></ul><hr><h3 id="举个实际例子"><a href="#举个实际例子" class="headerlink" title="举个实际例子"></a>举个实际例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedHashMap 手链盒 = <span class="keyword">new</span> <span class="title class_">MyLinkedHashMap</span>();</span><br><span class="line">手链盒.put(<span class="string">&quot;第一个&quot;</span>, <span class="number">1</span>);  <span class="comment">// 手链：头 &lt;-&gt; 第一个 &lt;-&gt; 尾</span></span><br><span class="line">手链盒.put(<span class="string">&quot;第二个&quot;</span>, <span class="number">2</span>);  <span class="comment">// 手链：头 &lt;-&gt; 第一个 &lt;-&gt; 第二个 &lt;-&gt; 尾</span></span><br><span class="line">手链盒.remove(<span class="string">&quot;第一个&quot;</span>); <span class="comment">// 手链：头 &lt;-&gt; 第二个 &lt;-&gt; 尾</span></span><br><span class="line">手链盒.keys();          <span class="comment">// 返回 [&quot;第二个&quot;]</span></span><br></pre></td></tr></table></figure><hr><h3 id="代码亮点总结"><a href="#代码亮点总结" class="headerlink" title="代码亮点总结"></a>代码亮点总结</h3><div class="table-container"><table><thead><tr><th>功能</th><th>实现方式</th></tr></thead><tbody><tr><td>快速查找</td><td>哈希表（笔记本）</td></tr><tr><td>记录插入顺序</td><td>双向链表（手链）</td></tr><tr><td>删除时快速调整</td><td>双向链表的前后指针操作</td></tr><tr><td>保证操作速度</td><td>哈希表O(1) + 链表O(1)</td></tr></tbody></table></div><p>这个设计完美结合了哈希表的快速查找和链表的顺序记录，就像同时拥有了闪电般的搜索能力和永不混乱的收纳大师！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>毕设-智慧图书管理系统</title>
      <link href="/posts/ccb8.html"/>
      <url>/posts/ccb8.html</url>
      
        <content type="html"><![CDATA[<p>Todo</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧提升</title>
      <link href="/posts/d435.html"/>
      <url>/posts/d435.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习技巧"><a href="#学习技巧" class="headerlink" title="学习技巧"></a>学习技巧</h1><h2 id="使用AI小技巧"><a href="#使用AI小技巧" class="headerlink" title="使用AI小技巧"></a>使用AI小技巧</h2><ul><li>使用元问题提问<br>我想深入全面的学习了解“xxx”相关的知识，我应该问你什么问题？请至少列出20个。(使用大模型，不用搜索功能)<br>然后再根据给出的20个问题，逐个问perplexity，它会有相关的5个问题，在第二轮可以根据延升继续问<br>Round1-20个 Round2-100个</li><li>英文提问x沉浸式翻译<br>英语提问 然后回答的英语 直接用插件翻译</li><li>限定字数 （不限定字数 回答可能字数很少，限定字数 回答会尽可能的多）</li><li>找资料<br>帮我找xxx的链接</li><li>如果想短期了解一个行业或者什么的 试着一天之内围绕一个专题</li></ul><h2 id="脑图的使用"><a href="#脑图的使用" class="headerlink" title="脑图的使用"></a>脑图的使用</h2><ul><li><p>快捷键<br>Ctrl + K 添加超链接<br>Ctrl + T 添加注释<br>Ctrl + F 查找替换<br>Ctrl + R 插入关系线<br>Ctrl + 12345 添加优先级</p><p>Alt + 1 收起<br>Alt + 0 展开所有<br>Alt + d 依次展开主题</p></li><li><p>学习、复习记录</p></li><li><p>思考<br>浮动主题功能 双击空白处</p><p>首先是有个大主题<br>然后想到什么写什么<br>然后对这些进行分类</p></li><li><p>工作<br>做计划<br>会议管理<br>会议演示<br>任务管理<br>项目管理</p></li></ul><h2 id="Anki卡片"><a href="#Anki卡片" class="headerlink" title="Anki卡片"></a>Anki卡片</h2><blockquote><p>Anki 是一款基于间隔重复原理的记忆卡片软件，旨在帮助用户更高效地记忆各种信息。其名称源自日语“暗记”，意为“记忆”或“背诵”。</p></blockquote><p><a href="http://www.ankichina.net/manual/anki">Anki使用文档中文版</a><br><a href="https://utgd.net/article/9595">快速入门了解</a></p><h4 id="初步了解Anki"><a href="#初步了解Anki" class="headerlink" title="初步了解Anki"></a>初步了解Anki</h4><p>使用Anki的核心就是 牌组跟卡片</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111054965.png" alt="image-20240918111054965"></p><p>牌组就是分类，把不同的卡片归类于不同的牌组，方便分类记忆</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111232091.png" alt="image-20240918111232091"></p><p>卡片的使用就是 问题 —&gt; 答案 使用Anki的好处 可以设置复习 定期提醒 不像记笔记记了就不去看了</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111440451.png" alt="image-20240918111440451"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111454557.png" alt="image-20240918111454557"></p><p>还有一个点就是，所有问题、答案、笔记 都自己手动添加，自己整理的才是适合自己的。</p><p>可以使用别人的笔记模板，无非是多了一些字段，卡片格式会更好一些。<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111807524.png" alt="image-20240918111807524" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111657530.png" alt="image-20240918111657530"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918111905141.png" alt="image-20240918111905141"></p><h4 id="使用卡片"><a href="#使用卡片" class="headerlink" title="使用卡片"></a>使用卡片</h4><p>开始学习<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918112243434.png" alt="image-20240918112243434"></p><p>回忆答案，然后再显示答案</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240918112324075.png" alt="image-20240918112324075"></p><p>选择下面的评分，Anki利用评分的算法来给你设置复习的时间…</p><p>需要对每次复习的卡片进行新的知识补充 点击左边的编辑就好了。</p><h4 id="关于卡片同步"><a href="#关于卡片同步" class="headerlink" title="关于卡片同步"></a>关于卡片同步</h4><p>多平台同步，登录账号就ok<br>ios的Anki需要付费168好像，解决方案是… 暂时没找到解决方案 可以尝试的方案（卡片导出，然后下载能导入.apkg格式的app，可以解决）</p><p>安卓可以直接下载安卓版</p><h4 id="模板下载"><a href="#模板下载" class="headerlink" title="模板下载"></a>模板下载</h4><p>找我发给你</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期感悟</title>
      <link href="/posts/28df.html"/>
      <url>/posts/28df.html</url>
      
        <content type="html"><![CDATA[<h1 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h1><p>焦虑、迷茫、不安一定是伴随着这一年的，尤其是我选择的是就业，学习Java开发断断续续地，Java基础、JavaWeb、SpringBoot、用户中心系统（学习，部署，上线，上线了还有点问题，感觉是跨越问题，emmm不清楚 有空了再调一下。），域名、服务器，域名还是备案成功了，后期再做两个项目部署上去…</p><p>为什么焦虑呢，我的选择真的有点晚了，寒假感情不顺，然后选择好好搞技术，24年开头才开始学呢，然后慢慢地就到了9月份，秋招时间来了，但是我的项目还没有落实，八股文也没有背，刷题也没有刷，SpringCloud还没学，就是差很多东西，是吧。。。</p><p>实训课，唯一听的一点就是，老师在讲考研、考公、就业。。。</p><blockquote><p>教师以后要裁员  研究生去教幼儿园  大专的GG<br>考公<br>1.如果你要钱，就不去，因为如果突发<br>2.最好有关系，不然G，因为就算公务员不能直系，但是可以交换进比如你国电领导和烟草领导说好各接受自己的子女，然后交换垄断<br>3.不自由，护照有限制，车子，电话品牌被限制<br>4.你想辞职都难，而且容易被调，一调难回<br>5.西部计划什么的，都是吃苦，难提升<br>考研：<br>1.要明确自己位置<br>2.我们专业后面有前途<br>3.但是保研名额增加是双非增加<br>4.考研上岸主要还是复试，复试1分当考研6分<br>5.考研如果进不了92，导师不好GG，最好别去<br>就业<br>1.抓住校园招聘，校招不代表只能本校参加，你可以去985参加，大厂多<br>2.最好先进大厂，大城市，后面跳槽好跳</p></blockquote><p>  很真实，反正目前大家都是牛马了，看哪匹牛哪匹马能在群牛马里脱颖而出</p><p>  秋招估计是寄了，差点准备，差点心态，现在就是全力准备春招提前批了<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/ec6b42fc0824ea9da4278a3ca5ee43c7.png" alt="校招图"></p><p>  这个我觉得还是有点用<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/9ce73c17aa26be733a3eb73a7bb410c8.png" alt="校招把握"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/f40f89c94e46089257655cda49eb4314.png" alt="途径"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/431cec0641c7bdbe02d680a9167208c2.png" alt="过程"></p><p>现在的状态就是，八股文、面试题、算法刷题、项目、以及SpringCloud的学习，需要自己的持续性输出，不能懈怠，六级也要准备（嘻嘻嘻，这次真得下功夫了，不然六级真过不了。。。那就太糟糕了。）</p><p>自己心态还是要放平，就算天塌下来了，也要有passion，完成自己的mission，不然就真毕业失业，然后转业。。。</p><p>还有就是，没真正了解你具体情况的，你不要受他们的影响，他们什么都不懂，你坚定自己的方向就好啦，最后都是结果论，走到那一步再说。</p><p>最后还是跟自己说一句：干就完事儿，关关难过关关过！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咕咕の用户中心</title>
      <link href="/posts/1854.html"/>
      <url>/posts/1854.html</url>
      
        <content type="html"><![CDATA[<h1 id="咕咕の用户中心"><a href="#咕咕の用户中心" class="headerlink" title="咕咕の用户中心"></a>咕咕の用户中心</h1><h2 id="项目回顾"><a href="#项目回顾" class="headerlink" title="项目回顾"></a>项目回顾</h2><p>1、<strong>开发规范-REST</strong>前后端分离，各自专注于各自的工作，一定要在开发过程编写一个<strong>接口文档</strong>，前后端都按照接口文档选用api，后端测试方法的时候可以按照接口文档通过Postman进行测试，后端测试好，写前端，再进行前后端联调。<br>2、准备对应的Controller、Service（接口、实现类）、Mapper基础结构<br>3、环境搭建 创建SpringBoot工程，引入对应的起步依赖(pom.xml)—&gt; 配置文件application.yml 中引入mybatis，准备对应的实体类<br>4、Controller-&gt;Service-&gt;Mapper 编写流程<br>5、项目工程结构应该按照如下 controller、mapper、pojo、service （但是这个项目呢，做的时候没有这么来，之后慢慢调整）<br>    <img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20221213222039985.png" alt="项目工程结构"></p><p>Controller、Service(接口、实现类)和Mapper的基础结构及其规范如下:</p><ol><li><p>Controller层:<br>结构:</p><ul><li>使用@RestController或@Controller注解标记</li><li>定义请求映射方法,处理HTTP请求</li><li>调用Service层方法处理业务逻辑<br>规范:</li><li>只负责请求参数的接收和结果的返回</li><li>不包含业务逻辑,将业务处理委托给Service层</li><li>方法命名应体现功能,如listUsers(), createOrder()等</li><li>统一的异常处理和返回结果封装</li></ul></li><li><p>Service层:<br>结构:</p><ul><li>接口:定义业务方法</li><li>实现类:实现接口中定义的方法,包含具体业务逻辑<br>规范:</li><li>接口命名为IXxxService,实现类命名为XxxServiceImpl</li><li>包含核心业务逻辑</li><li>调用Mapper层进行数据操作</li><li>方法命名应体现业务含义</li><li>使用事务管理保证数据一致性</li></ul></li><li><p>Mapper层:<br>结构:</p><ul><li>接口:定义数据库操作方法</li><li>XML文件:编写SQL语句<br>规范:</li><li>接口与XML文件一一对应</li><li>方法命名规范,如insert, update, delete, select等</li><li>SQL语句应优化以提高性能</li></ul></li></ol><p>这样分层的主要目的是:</p><ol><li>职责分离:每一层负责特定的功能,降低耦合</li><li>提高可维护性:修改某一层不会影响其他层</li><li>利于测试:可以对每一层单独进行单元测试</li><li>提高复用性:Service层可以被多个Controller调用</li><li>便于团队协作:不同开发人员可以专注于不同的层</li></ol><p>通过这种分层结构,可以使代码更加清晰、易于维护和扩展。在实际开发中应该严格遵循这些规范,以保证项目的质量和可维护性。</p><h2 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h2><p>需求分析 =&gt; 设计（概要设计、详细设计）=&gt; 技术选型 =&gt; 初始化 / 引入需要的技术 =&gt; 写 Demo =&gt; 写代码（实现业务逻辑） =&gt; 测试（单元测试、系统测试）=&gt; 代码提交 / 代码评审 =&gt; 部署 =&gt; 发布上线</p><h2 id="团队职责"><a href="#团队职责" class="headerlink" title="团队职责"></a>团队职责</h2><ol><li>产品经理:</li></ol><ul><li>市场调研和需求分析</li><li>产品定义和规划</li><li>编写产品需求文档(PRD)</li><li>用户界面和交互设计</li><li>协调各方资源,推进项目进度</li><li>产品发布后的数据分析和迭代优化</li></ul><ol><li>前端开发:</li></ol><ul><li>参与需求评审,提出前端相关建议</li><li>技术方案设计</li><li>页面重构和视觉还原</li><li>前端功能开发</li><li>与后端进行接口联调</li><li>前端自测</li><li>配合测试修复bug</li><li>性能优化</li></ul><ol><li>后端开发:</li></ol><ul><li>参与需求分析,设计系统架构</li><li>数据库设计</li><li>编写API接口文档</li><li>后端功能开发和单元测试</li><li>与前端联调接口</li><li>系统集成测试</li><li>性能调优和安全加固</li><li>部署上线</li></ul><p>整体流程:</p><ol><li>需求分析</li><li>产品设计</li><li>技术方案(初步编写API接口文档)</li><li>开发实现</li><li>测试</li><li>发布上线</li><li>运维和迭代</li></ol><p>在实际项目中,三个角色需要紧密配合,相互沟通,共同推进项目进度。产品经理起到统筹协调的作用,前后端则专注于各自的技术实现。整个过程是迭代循环的,需要不断优化改进。</p><hr><h2 id="Bug优化"><a href="#Bug优化" class="headerlink" title="Bug优化"></a>Bug优化</h2><h4 id="bug优化"><a href="#bug优化" class="headerlink" title="bug优化"></a>bug优化</h4><ul><li>id自增 由于Mybatis-plus框架可能版本问题原因 导致每次新增数据的id 生成19位且随机(因为mybatis-plus默认主键策略 使用了雪花算法导致的 )<br>解决方案—-&gt; 实体类中 user 设置主键策略，同时将表的数据清除，重新添加数据。</li></ul><p>确保在实体类中设置了正确的主键策略。可以在<code>@TableId</code>注解中指定<code>IdType.AUTO</code>，以使用数据库的自增ID功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java<span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><hr><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登录 / 注册</li><li>用户管理（仅管理员可见，实际就是后台管理后续可以扩充更多功能）对用户的查询或者修改</li><li>用户校验（注册时填写星球编号）</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：三件套 + React + 组件库 Ant Design + Umi + Ant Design Pro（现成的管理系统）</p><p>后端：</p><ul><li>java</li><li>spring（依赖注入框架，帮助你管理 Java 对象，集成一些其他的内容）</li><li>springmvc（web 框架，提供接口访问、restful接口等能力）</li><li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li><li>mybatis-plus（对 mybatis 的增强，不用写 sql 也能实现增删改查）</li><li>springboot（<strong>快速启动</strong> / 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架）</li><li>junit 单元测试库</li><li>mysql 数据库</li></ul><p>部署：服务器 / 容器（平台）</p><h2 id="初始化-Java-项目的方式"><a href="#初始化-Java-项目的方式" class="headerlink" title="初始化 Java 项目的方式"></a>初始化 Java 项目的方式</h2><p> 直接在 IDEA 开发工具中生成  ✔</p><p>如果要引入 java 的包，可以去 maven 中心仓库寻找（<a href="http://mvnrepository.com/）">http://mvnrepository.com/）</a></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>什么是数据库？存数据的</p><p>数据库里有什么？数据表（理解为 excel 表格）</p><p>java 操作数据库？程序代替人工</p><h3 id="什么是设计数据库表？"><a href="#什么是设计数据库表？" class="headerlink" title="什么是设计数据库表？"></a>什么是设计数据库表？</h3><p>有哪些表（模型）？表中有哪些字段？字段的类型？数据库字段添加索引？表与表之间的关联？</p><h3 id="用户表设计"><a href="#用户表设计" class="headerlink" title="用户表设计"></a>用户表设计</h3><p>id（主键）bigint</p><p>username 昵称  varchar</p><p>userAccount 登录账号 </p><p>avatarUrl 头像 varchar</p><p>gender 性别 tinyint</p><p>userPassword 密码  varchar</p><p>phone 电话 varchar</p><p>email 邮箱 varchar</p><p>userStatus 用户状态 int  0 - 正常 </p><p>createTime 创建时间（数据插入时间）datetime</p><p>updateTime 更新时间（数据更新时间）datetime</p><p>isDelete 是否删除 0 1（逻辑删除）tinyint</p><p>userRole 用户角色 0 - 普通用户 1 - 管理员</p><p>开发过程 有需要添加的可以后续添加</p><p>planetCode 用户标识码，连通其他业务</p><h3 id="自动生成器的使用"><a href="#自动生成器的使用" class="headerlink" title="自动生成器的使用"></a>自动生成器的使用</h3><p>MyBatisX 插件，自动根据数据库生成：</p><ul><li>domain：实体对象</li><li>mapper：操作数据库的对象</li><li>mapper.xml：定义了 mapper 对象和数据库的关联，可以在里面自己写 SQL</li><li>service：包含常用的增删改查</li><li>serviceImpl：具体实现 service</li></ul><p>从而提高开发效率！</p><h2 id="注册逻辑设计"><a href="#注册逻辑设计" class="headerlink" title="注册逻辑设计"></a>注册逻辑设计</h2><ol><li>用户在前端输入账户和密码、以及校验码（todo）</li><li>校验用户的账户、密码、校验密码，是否符合要求<ol><li>非空</li><li>账户长度 <strong>不小于</strong> 4 位</li><li>密码就 <strong>不小于</strong> 8 位吧</li><li>账户不能重复</li><li>账户不包含特殊字符</li><li>密码和校验密码相同</li></ol></li><li>对密码进行加密（密码千万不要直接以明文存储到数据库中）</li><li>向数据库插入用户数据</li></ol><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>接受参数：用户账户、密码</p><p>请求类型：POST </p><p>请求体：JSON 格式的数据</p><blockquote><p>请求参数很长时不建议用 get</p></blockquote><p>返回值：用户信息（ <strong>脱敏</strong> ）</p><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><ol><li><p>校验用户账户和密码是否合法</p><ol><li>非空</li><li>账户长度不小于 4 位</li><li>密码就不小于 8 位</li><li>账户不包含特殊字符</li></ol></li><li><p>校验密码是否输入正确，要和数据库中的密文密码去对比</p></li><li><p>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</p></li><li><p>我们要记录用户的登录态（session），将其存到服务器上（用后端 SpringBoot 框架封装的服务器 tomcat 去记录）</p><p>cookie</p></li><li><p>返回脱敏后的用户信息</p></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>控制层 Controller 封装请求</p><p>application.yml 指定接口全局路径前缀：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">servlet:</span><br><span class="line">  context-path: /api</span><br></pre></td></tr></table></figure><p>控制器注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RestController 适用于编写 restful 风格的 api，返回值默认为 json 类型</span><br></pre></td></tr></table></figure><p>校验写在哪里？</p><ul><li>controller 层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</li><li>service 层是对业务逻辑的校验（有可能被 controller 之外的类调用）</li></ul><h3 id="如何知道是哪个用户登录了？"><a href="#如何知道是哪个用户登录了？" class="headerlink" title="如何知道是哪个用户登录了？"></a>如何知道是哪个用户登录了？</h3><ol><li><p>连接服务器端后，得到一个 session 状态（匿名会话），返回给前端</p></li><li><p>登录成功后，得到了登录成功的 session，并且给该session设置一些值（比如用户信息），返回给前端一个设置 cookie 的 ”命令“ </p><p><strong>session =&gt; cookie</strong> </p></li><li><p>前端接收到后端的命令后，设置 cookie，保存到浏览器内</p></li><li><p>前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</p></li><li><p>后端拿到前端传来的 cookie，找到对应的 session</p></li><li><p>后端从 session 中可以取出基于该 session 存储的变量（用户的登录信息、登录名）</p></li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>接口设计关键：必须鉴权！！！</p><ol><li>查询用户（允许根据用户名查询）</li><li>删除用户</li><li>编辑用户信息</li></ol><h2 id="写代码流程"><a href="#写代码流程" class="headerlink" title="写代码流程"></a>写代码流程</h2><ol><li>先做设计</li><li>代码实现</li><li>持续优化！！！（复用代码、提取公共逻辑 / 常量）</li></ol><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><p>前端需要向后端发送请求才能获取数据 / 执行操作。</p><p>怎么发请求：前端使用 ajax 来请求后端</p><h3 id="前端请求库及封装关系"><a href="#前端请求库及封装关系" class="headerlink" title="前端请求库及封装关系"></a>前端请求库及封装关系</h3><ul><li><p>axios 封装了 ajax</p></li><li><p>request 是 ant design 项目又封装了一次</p></li></ul><p>追踪 request 源码：用到了 umi 的插件、requestConfig 配置文件</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>正向代理：替客户端向服务器发送请求，可以解决跨域问题</p><p>反向代理：替服务器统一接收请求。</p><p>怎么实现代理？</p><ul><li>Nginx 服务器</li><li>Node.js 服务器</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>原本请求：<a href="http://localhost:8000/api/user/login">http://localhost:8000/api/user/login</a></p><p>代理到请求：<a href="http://localhost:8080/api/user/login">http://localhost:8080/api/user/login</a></p><h2 id="前端框架介绍"><a href="#前端框架介绍" class="headerlink" title="前端框架介绍"></a>前端框架介绍</h2><h3 id="Ant-Design-Pro（Umi-框架）权限管理"><a href="#Ant-Design-Pro（Umi-框架）权限管理" class="headerlink" title="Ant Design Pro（Umi 框架）权限管理"></a>Ant Design Pro（Umi 框架）权限管理</h3><ul><li>app.tsx：项目全局入口文件，定义了整个项目中使用的公共数据（比如用户信息）</li><li>access.ts 控制用户的访问权限</li></ul><p>获取初始状态流程：首次访问页面（刷新页面），进入 app.tsx，执行 getInitialState 方法，该方法的返回值就是全局可用的状态值。</p><h3 id="ProComponents-高级表单"><a href="#ProComponents-高级表单" class="headerlink" title="ProComponents 高级表单"></a>ProComponents 高级表单</h3><ol><li>通过 columns 定义表格有哪些列</li><li>columns 属性<ul><li>dataIndex 对应返回数据对象的属性</li><li>title 表格列名</li><li>copyable 是否允许复制</li><li>ellipsis 是否允许缩略</li><li>valueType：用于声明这一列的类型（dateTime、select）</li></ul></li></ol><h3 id="框架关系"><a href="#框架关系" class="headerlink" title="框架关系"></a>框架关系</h3><p>Ant Design 组件库 =&gt; 基于 React 实现</p><p>Ant Design Procomponents =&gt; 基于 Ant Design 实现</p><p>Ant Design Pro 后台管理系统 =&gt; 基于 Ant Design + React + Ant Design Procomponents + 其他的库实现</p><h3 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h3><p>MFSU：前端编译优化</p><h2 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h2><h3 id="通用返回对象"><a href="#通用返回对象" class="headerlink" title="通用返回对象"></a>通用返回对象</h3><p>目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败</p><p>200、404、500、502、503</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yupi&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="comment">// 业务状态码</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;whynot&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">50001</span> <span class="comment">// 业务状态码</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户操作异常、xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>自定义错误码，返回类支持返回正常和错误</p><h3 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h3><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ol><li><p>定义业务异常类</p><ol><li>相对于 java 的异常类，支持更多字段</li><li>自定义构造函数，更灵活 / 快捷的设置字段</li></ol></li><li>编写全局异常处理器（利用 Spring AOP，在调用方法前后进行额外的处理）</li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错 / 信息</li><li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li><li>集中处理，比如记录日志</li></ol><h2 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h2><h3 id="全局响应处理"><a href="#全局响应处理" class="headerlink" title="全局响应处理"></a>全局响应处理</h3><p>应用场景：我们需要对接口的 <strong>通用响应</strong> 进行统一处理，比如从 response 中取出 data；或者根据 code 去集中处理错误，比如用户未登录、没权限之类的。</p><p>优势：不用在每个接口请求中都去写相同的逻辑</p><p>实现：参考你用的请求封装工具的官方文档，比如 umi-request（<a href="https://github.com/umijs/umi-request#interceptor、https://blog.csdn.net/huantai3334/article/details/116780020）。如果你用">https://github.com/umijs/umi-request#interceptor、https://blog.csdn.net/huantai3334/article/details/116780020）。如果你用</a> <strong>axios</strong>，参考 axios 的文档。</p><p>创建新的文件，在该文件中配置一个全局请求类。在发送请求时，使用我们自己的定义的全局请求类。</p><h2 id="用户校验"><a href="#用户校验" class="headerlink" title="用户校验"></a>用户校验</h2><blockquote><p>仅适用于用户可信的情况</p></blockquote><p>先让用户自己填：2 - 5 位编号，全凭自觉。</p><p>后台补充对编号的校验：长度校验、唯一性校验</p><p>前端补充输入框，适配后端。</p><blockquote><p>后期弄一个业务码，有业务码才能注册捏</p></blockquote><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>参考文章：<a href="https://blog.csdn.net/weixin_41701290/article/details/120173283">https://blog.csdn.net/weixin_41701290/article/details/120173283</a></p><p>本地开发：localhost（127.0.0.1）</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p><p>为什么需要？</p><ol><li>每个环境互不影响</li><li>区分不同的阶段：开发 / 测试 / 生产</li><li>对项目进行优化：<ol><li>本地日志级别</li><li>精简依赖，节省项目体积</li><li>项目的环境 / 参数可以调整，比如 JVM 参数</li></ol></li></ol><p>针对不同环境做不同的事情。</p><p>多环境分类：</p><ol><li>本地环境（自己的电脑）localhost</li><li>开发环境（远程开发）大家连同一台机器，为了大家开发方便</li><li>测试环境（测试）开发 / 测试 / 产品，单元测试 / 性能测试 / 功能测试 / 系统集成测试，独立的数据库、独立的服务器</li><li>预发布环境（体验服）：和正式环境一致，正式数据库，更严谨，查出更多问题</li><li>正式环境（线上，公开对外访问的项目）：尽量不要改动，保证上线前的代码是 “完美” 运行</li><li>沙箱环境（实验环境）：为了做实验</li></ol><h3 id="前端多环境实战"><a href="#前端多环境实战" class="headerlink" title="前端多环境实战"></a>前端多环境实战</h3><ul><li><p>请求地址</p><ul><li><p>开发环境：localhost:8000</p></li><li><p>线上环境：user-backend.code-nav.cn</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">startFront</span>(<span class="params">env</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(env === <span class="string">&#x27;prod&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 不输出注释 </span></span><br><span class="line">        <span class="comment">// 项目优化</span></span><br><span class="line">        <span class="comment">// 修改请求地址</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 保持本地开发逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了 umi 框架，build 时会自动传入 NODE_ENV == production 参数，start NODE_ENV 参数为 development</p></li><li><p>启动方式</p><ul><li>开发环境：npm run start（本地启动，监听端口、自动更新）</li><li>线上环境：npm run build（项目构建打包），可以使用 serve 工具启动（npm i -g serve）</li></ul></li><li><p>项目的配置</p><p>不同的项目（框架）都有不同的配置文件，umi 的配置文件是 config，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境。参考文档：<a href="https://umijs.org/zh-CN/docs/deployment">https://umijs.org/zh-CN/docs/deployment</a></p><ul><li>开发环境：config.dev.ts</li><li>生产环境：config.prod.ts</li><li>公共配置：config.ts 不带后缀</li></ul></li></ul><h3 id="后端多环境实战"><a href="#后端多环境实战" class="headerlink" title="后端多环境实战"></a>后端多环境实战</h3><p>SpringBoot 项目，通过 application.yml 添加不同的后缀来区分配置文件</p><p>可以在启动项目时传入环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>主要是改：</p><ul><li><p>依赖的环境地址</p><ul><li><p>数据库地址</p></li><li><p>缓存地址</p></li><li><p>消息队列地址</p></li><li><p>项目端口号</p></li></ul></li><li><p>服务器配置</p></li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>参考文章：<a href="https://www.bilibili.com/read/cv16179200">https://www.bilibili.com/read/cv16179200</a></p><p>需要 Linux 服务器（建议大家用 CentOS 8+ / 7.6 以上）</p><h3 id="原始部署"><a href="#原始部署" class="headerlink" title="原始部署"></a>原始部署</h3><p>什么都自己装</p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>需要 web 服务器：<strong>nginx</strong> 、apache、tomcat</p><p>安装 nginx 服务器：</p><ol><li><p>用系统自带的软件包管理器快速安装，比如 centos 的 yum</p></li><li><p>自己到官网安装（参考文章）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -o nginx-1.21.6.tar.gz http://nginx.org/download/nginx-1.21.6.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.21.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> nginx-1.21.6</span><br><span class="line"></span><br><span class="line">   37  2022-04-17 23:30:09 yum install pcre pcre-devel -y</span><br><span class="line">   39  2022-04-17 23:30:59 yum install openssl openssl-devel -y</span><br><span class="line">   41  2022-04-17 23:31:57 ./configure --with-http_ssl_module --with-http_v2_module --with-stream</span><br><span class="line">   42  2022-04-17 23:32:13 make</span><br><span class="line">   43  2022-04-17 23:32:54 make install</span><br><span class="line">   48  2022-04-17 23:33:40 <span class="built_in">ls</span> /usr/local/nginx/sbin/nginx</span><br><span class="line">   vim /etc/profile</span><br><span class="line">  在最后一行添加：<span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/nginx/sbin</span><br><span class="line">  </span><br><span class="line">  nginx</span><br><span class="line">  </span><br><span class="line">  netstat -ntlp 查看启动情况</span><br></pre></td></tr></table></figure><p>注意 nginx 权限</p></li></ol><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>java、maven</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk*</span><br><span class="line"></span><br><span class="line">curl -o apache-maven-3.8.5-bin.tar.gz https://dlcdn.apache.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> xxx 下载代码</span><br><span class="line"></span><br><span class="line">打包构建，跳过测试</span><br><span class="line">mvn package -DskipTests</span><br><span class="line"></span><br><span class="line">java -jar ./user-center-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><h3 id="宝塔-Linux-部署"><a href="#宝塔-Linux-部署" class="headerlink" title="宝塔 Linux 部署"></a>宝塔 Linux 部署</h3><p>Linux 运维面板</p><p>官方安装教程：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p><p>方便管理服务器、方便安装软件</p><h3 id="前端托管"><a href="#前端托管" class="headerlink" title="前端托管"></a>前端托管</h3><p>前端腾讯云 web 应用托管（比容器化更傻瓜式，不需要自己写构建应用的命令，就能启动前端项目）</p><blockquote><p><a href="https://console.cloud.tencent.com/webify/new">https://console.cloud.tencent.com/webify/new</a></p></blockquote><ul><li>小缺点：需要将代码放到代码托管平台上</li><li>优势：不用写命令、代码更新时自动构建</li></ul><h3 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h3><p>docker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有同学都能下载镜像，更容易分发和移植。</p><p>再启动项目时，不需要敲一大堆命令，而是直接下载镜像、启动镜像就可以了。</p><p>docker 可以理解为软件安装包。</p><p>Docker 安装：<a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a> 或者宝塔安装</p><p>Dockerfile 用于指定构建 Docker 镜像的方法</p><p>Dockerfile 一般情况下不需要完全从 0 自己写，建议去 github、gitee 等托管平台参考同类项目（比如 springboot）</p><p>Dockerfile 编写：</p><ul><li>FROM 依赖的基础镜像</li><li>WORKDIR 工作目录</li><li>COPY 从本机复制文件</li><li>RUN 执行命令</li><li>CMD / ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</li></ul><p>根据 Dockerfile 构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line">docker build -t user-center-backend:v0.0.1 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">docker build -t user-center-front:v0.0.1 .</span><br></pre></td></tr></table></figure><p>Docker 构建优化：减少尺寸、减少构建时间（比如多阶段构建，可以丢弃之前阶段不需要的内容）</p><p>docker run 启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端</span></span><br><span class="line">docker run -p 80:80 -d user-center-frontend:v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">docker run -p 8080:8080 user-center-backend:v0.0.1</span><br></pre></td></tr></table></figure><p>虚拟化</p><ol><li>端口映射：把本机的资源（实际访问地址）和容器内部的资源（应用启动端口）进行关联</li><li>目录映射：把本机的端口和容器应用的端口进行关联</li></ol><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t  fee2bbb7c9ee /bin/bash</span><br></pre></td></tr></table></figure><p>查看进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f [container-id]</span><br></pre></td></tr></table></figure><p>杀死容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>强制删除镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f</span><br></pre></td></tr></table></figure><h3 id="Docker-平台部署"><a href="#Docker-平台部署" class="headerlink" title="Docker 平台部署"></a>Docker 平台部署</h3><ol><li>云服务商的容器平台（腾讯云、阿里云）</li><li>面向某个领域的容器平台（前端 / 后端微信云托管）<strong>要花钱！</strong></li></ol><p>容器平台的好处：</p><ol><li>不用输命令来操作，更方便省事</li><li>不用在控制台操作，更傻瓜式、更简单</li><li>大厂运维，比自己运维更省心</li><li>额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）</li></ol><p>爽就完事了！！！</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>前端项目访问流程：用户输入网址 =&gt; 域名解析服务器（把网址解析为 ip 地址 / 交给其他的域名解析服务） =&gt; 服务器 =&gt;（防火墙）=&gt; nginx 接收请求，找到对应的文件，返回文件给前端 =&gt; 前端加载文件到浏览器中（js、css） =&gt; 渲染页面</p><p>后端项目访问流程：用户输入网址 =&gt; 域名解析服务器 =&gt; 服务器 =&gt; nginx 接收请求 =&gt; 后端项目（比如 8080端口）</p><p>nginx 反向代理的作用：替服务器接收请求，转发请求</p><h2 id="跨域问题解决"><a href="#跨域问题解决" class="headerlink" title="跨域问题解决"></a>跨域问题解决</h2><p>浏览器为了用户的安全，仅允许向 <strong>同域名、同端口</strong> 的服务器发送请求。</p><p>如何解决跨域？</p><p>最直接的方式：把域名、端口改成相同的</p><h3 id="添加跨域头"><a href="#添加跨域头" class="headerlink" title="添加跨域头"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p><h4 id="1-网关支持（Nginx）"><a href="#1-网关支持（Nginx）" class="headerlink" title="1. 网关支持（Nginx）"></a>1. 网关支持（Nginx）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域配置</span></span><br><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/api/;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-修改后端服务"><a href="#2-修改后端服务" class="headerlink" title="2. 修改后端服务"></a>2. 修改后端服务</h4><ol><li><p>配置 @CrossOrigin 注解</p></li><li><p>添加 web 全局请求拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfg</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">                <span class="comment">//当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:8082&quot;</span>, <span class="string">&quot;http://127.0.0.1:8083&quot;</span>)</span><br><span class="line">                <span class="comment">//是否允许证书 不再默认开启</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">//设置允许的方法</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义新的 corsFilter Bean，参考：<a href="https://www.jianshu.com/p/b02099a435bd">https://www.jianshu.com/p/b02099a435bd</a></p></li></ol><h2 id="项目优化点"><a href="#项目优化点" class="headerlink" title="项目优化点"></a>项目优化点</h2><ol><li>功能扩充<ol><li>管理员创建用户todo、修改用户信息√、删除用户√</li><li>上传头像todo（上传文件功能，再利用阿里云oss）</li><li>按照更多的条件去查询用户todo</li><li>更改权限</li></ol></li><li>修改 Bug</li><li>项目登录改为分布式 session（单点登录 - redis）</li><li>通用性<ol><li>set-cookie domain 域名更通用，比如改为 *.xxx.com</li><li>把用户管理系统 =&gt; 用户中心（之后所有的服务都请求这个后端）</li></ol></li><li>后台添加全局请求拦截器（统一去判断用户权限、统一记录请求日志）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java项目 -前后端分离单体项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb-JSP</title>
      <link href="/posts/6a6d.html"/>
      <url>/posts/6a6d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Javaweb-JSP"><a href="#Javaweb-JSP" class="headerlink" title="Javaweb-JSP"></a>Javaweb-JSP</h2><h3 id="JSP：Java-Server-Pages，Java服务端页面"><a href="#JSP：Java-Server-Pages，Java服务端页面" class="headerlink" title="JSP：Java Server Pages，Java服务端页面"></a>JSP：Java Server Pages，Java服务端页面</h3><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723104538940.png" alt="image-20240723104538940"></p><h3 id="JSP-快速入门"><a href="#JSP-快速入门" class="headerlink" title="JSP 快速入门"></a>JSP 快速入门</h3><p>1.导入JSP坐标 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> //这个不要忘了</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在webapp文件下 创建jsp文件</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723104925854.png" alt="image-20240723104925854"></p><p>3.编写HTML标签 和 Java代码<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723105025132.png" alt="image-20240723105025132"></p><h3 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h3><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723105149687.png" alt="image-20240723105149687"></p><h3 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h3><p>JSP脚本用于在JSP页面内定义Java代码</p><p>JSP脚本分类：</p><ol><li><code>&lt;%...%&gt;</code>内容会直接放到_jspService()方法中</li><li><code>&lt;%=...%&gt;</code>内容会放到out.print()中，作为out.print()的参数</li><li><code>&lt;%!...%&gt;</code>内容会放到_jspService()方法之外，被类直接包含</li></ol><h3 id="JSP-缺点"><a href="#JSP-缺点" class="headerlink" title="JSP 缺点"></a>JSP 缺点</h3><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723105907987.png" alt="image-20240723105907987"><br>后续用html+ajax 替换jsp</p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><ul><li>Expression Language 表达式语言，用于简化JSP页面内的Java代码</li><li>主要功能：获取数据</li><li>语法：<script type="math/tex">{expression}</script></li><li><script type="math/tex">{brands}</script>: 获取域中存储的key为brands的数据</li><li>JavaWeb 中的四大域对象：<ol><li>page:当前页面有效</li><li>request：当前请求有效</li><li>session：当前会话有效</li><li>application：当前应用有效</li></ol></li></ul><p><strong>el 表达式获取数据，会依次从这4个域中寻找，直到找到为止</strong></p><h3 id="JSTL-标签"><a href="#JSTL-标签" class="headerlink" title="JSTL 标签"></a>JSTL 标签</h3><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723111947777.png" alt="image-20240723111947777"><br>主要用 if 跟 foreach</p><h3 id="JSTL-快速入门"><a href="#JSTL-快速入门" class="headerlink" title="JSTL 快速入门"></a>JSTL 快速入门</h3><p>1.导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在JSP页面上引入JSTL标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>3.使用 <code>&lt;c:if&gt;</code></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723112542098.png" alt="image-20240723112542098"><br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723112559204.png" alt="image-20240723112559204"></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: V<span class="string">&#x27;jie</span></span><br><span class="line"><span class="string">  Date: 2024/7/22</span></span><br><span class="line"><span class="string">  Time: 15:16</span></span><br><span class="line"><span class="string">  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="string">--%&gt;</span></span><br><span class="line"><span class="string">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Title&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;button&quot; value=&quot;新增&quot; id=&quot;add&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;80%&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;序号&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;品牌名称&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;企业名称&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;排序&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;品牌介绍&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;状态&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;操作&lt;/th&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;c:forEach items=&quot;$&#123;brands&#125;&quot; var=&quot;brand&quot; varStatus=&quot;status&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;tr align=&quot;center&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;%--        &lt;td&gt;$&#123;brand.id&#125;&lt;/td&gt;--%&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.brandName&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.companyName&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.ordered&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;c:if test=&quot;$&#123;brand.status == 1&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;启用&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/c:if&gt;</span></span><br><span class="line"><span class="string">        &lt;c:if test=&quot;$&#123;brand.status != 1&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;禁用&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/c:if&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;td&gt;&lt;a href=&quot;/brand-demo/selectByIdServlet?id=$&#123;brand.id&#125;&quot;&gt;修改&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;/c:forEach&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    document.getElementById(&quot;add&quot;).onclick = function ()&#123;</span></span><br><span class="line"><span class="string">        location.href = &quot;/brand-demo/addBrand.jsp&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MVC模式和三层架构"><a href="#MVC模式和三层架构" class="headerlink" title="MVC模式和三层架构"></a>MVC模式和三层架构</h3><p>MVC是一种分层开发的模式</p><ul><li>M：Model，业务模型，处理业务</li><li>V：View，视图，界面展示</li><li>C：Controller，控制器，处理请求，调用模型和视图</li></ul><p>MVC好处：</p><ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重用</li></ul><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723112941011.png" alt="image-20240723112941011"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113002026.png" alt="image-20240723113002026"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113047496.png" alt="image-20240723113047496"></p><h3 id="案例-完成品牌数据的增删改查操作"><a href="#案例-完成品牌数据的增删改查操作" class="headerlink" title="案例-完成品牌数据的增删改查操作"></a>案例-完成品牌数据的增删改查操作</h3><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113155501.png" alt="image-20240723113155501"></p><h4 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1. 准备环境"></a>1. 准备环境</h4><ul><li><p>[ ] 创建新的模块 brand_demo,引入坐标</p></li><li><p>[ ] 创建三层架构的包结构<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113352471.png" alt="image-20240723113352471"></p></li><li><p>[ ] 数据库表 tb_brand<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113451946.png" alt="image-20240723113451946"></p></li><li><p>[ ] 实体类Brand<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113547634.png" alt="image-20240723113547634"></p></li><li><p>[ ] MyBatis基础环境<br>MyBatis-config.xml <img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113747395.png" alt="image-20240723113747395"><br>BrandMapper.xml 包名一定要和上面的对应 上下对应<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113842115.png" alt="image-20240723113842115"></p><p>BrandMapper 接口<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723113954916.png" alt="image-20240723113954916"></p></li></ul><h4 id="2-查询所有"><a href="#2-查询所有" class="headerlink" title="2. 查询所有"></a>2. 查询所有</h4><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240723114123511.png" alt="image-20240723114123511"></p><p>写网页 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/brand-demo/selectAllServlet&quot;</span>&gt;</span>查询所有<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Step1: 数据层： 在BrandMapper中 使用注解的方式 实现查询所有<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724144037742.png" alt="image-20240724144037742"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from tb_brand&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;brandResultMap&quot;)</span></span><br><span class="line">List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Mapper相关的知识点<br>在MyBatis中，Mapper是一个核心的概念，它定义了映射到数据库操作的接口。Mapper是MyBatis的映射器接口，用于描述SQL语句和Java方法之间的映射关系，以及输入参数和输出结果之间的映射关系。Mapper接口是使用JDK代理生成的一个代理类。在编写MyBatis的程序时，常见的做法是编写一个Mapper接口，再编写相应的映射文件，之后便可以初始化MyBatis的环境，调用该接口的方法执行操作数据库的各中操作。MyBatis提供了注解来定义数据库操作，如<code>@Select</code>、<code>@Insert</code>、<code>@Update</code>等。这些注解可以直接写在Mapper接口的方法上，以定义该方法对应的SQL语句。</p><p>查询时 无名称，需要使用 ResultMap，进行映射</p><p> <strong>ResultMap详解</strong></p><p>在这个代码中，<code>BrandMapper</code>接口和<code>BrandMapper.xml</code>文件共同定义了一个ResultMap，名为<code>brandResultMap</code>。这个ResultMap用于将SQL查询结果映射到<code>Brand</code>Java对象的属性中。</p><p> <strong>ResultMap的定义</strong></p><p>在<code>BrandMapper.xml</code>文件中，ResultMap的定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，<code>id</code>属性指定了ResultMap的名称为<code>brandResultMap</code>，而<code>type</code>属性指定了ResultMap映射到的Java对象类型为<code>brand</code>。</p><p> <strong>ResultMap的映射规则</strong></p><p>在ResultMap中，定义了两个映射规则：</p><ol><li><code>brand_name</code>列映射到<code>brandName</code>属性</li><li><code>company_name</code>列映射到<code>companyName</code>属性</li></ol><p>这意味着，当MyBatis执行SQL查询时，它会将查询结果中的<code>brand_name</code>和<code>company_name</code>列分别映射到<code>Brand</code>对象的<code>brandName</code>和<code>companyName</code>属性中。</p><p> <strong>ResultMap的作用</strong></p><p>ResultMap的主要作用是简化对象关系映射（ORM）过程，使得开发人员不需要手动编写代码来映射SQL查询结果到Java对象中。通过定义ResultMap，MyBatis可以自动将SQL查询结果映射到Java对象中，减少了开发人员的工作量。</p><p> <strong>ResultMap的优点</strong></p><p>使用ResultMap有以下优点：</p><ul><li>简化ORM过程</li><li>减少开发人员的工作量</li><li><p>提高代码的可读性和可维护性</p><p><strong>总结</strong></p></li></ul><p>ResultMap是MyBatis中用于定义对象关系映射的重要组件。通过定义ResultMap，开发人员可以简化ORM过程，减少工作量，并提高代码的可读性和可维护性。在你的代码中，<code>brandResultMap</code> ResultMap用于将SQL查询结果映射到<code>Brand</code>Java对象的属性中，展示了ResultMap的作用和优点。</p></blockquote><p>Step2: Service层 封装业务逻辑 调用<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724144945020.png" alt="image-20240724144945020"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 调用BrandMapper.selectAll()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取BrandMapper</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 调用方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = mapper.selectAll();</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> brands;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个方法的实现都遵循了以下步骤：</p><ol><li>获取SqlSession对象</li><li>获取BrandMapper对象</li><li>调用BrandMapper对象的相应方法</li><li>提交事务（如果需要）</li><li>释放资源</li></ol></blockquote><p>Step3：Web层<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724145617816.png" alt="image-20240724145617816"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectAllServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectAllServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 调用BrandService完成查询</span></span><br><span class="line">        List&lt;Brand&gt; brands = service.selectAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 存入request域中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 转发到brand.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/brand.jsp&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724145935761.png" alt="image-20240724145935761"></p><p>brand.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: V<span class="string">&#x27;jie</span></span><br><span class="line"><span class="string">  Date: 2024/7/22</span></span><br><span class="line"><span class="string">  Time: 15:16</span></span><br><span class="line"><span class="string">  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="string">--%&gt;</span></span><br><span class="line"><span class="string">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Title&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;button&quot; value=&quot;新增&quot; id=&quot;add&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;80%&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;序号&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;品牌名称&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;企业名称&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;排序&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;品牌介绍&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;状态&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;操作&lt;/th&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;c:forEach items=&quot;$&#123;brands&#125;&quot; var=&quot;brand&quot; varStatus=&quot;status&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;tr align=&quot;center&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;%--        &lt;td&gt;$&#123;brand.id&#125;&lt;/td&gt;--%&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.brandName&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.companyName&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.ordered&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;c:if test=&quot;$&#123;brand.status == 1&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;启用&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/c:if&gt;</span></span><br><span class="line"><span class="string">        &lt;c:if test=&quot;$&#123;brand.status != 1&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;禁用&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/c:if&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;td&gt;&lt;a href=&quot;/brand-demo/selectByIdServlet?id=$&#123;brand.id&#125;&quot;&gt;修改&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/c:forEach&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    document.getElementById(&quot;add&quot;).onclick = function ()&#123;</span></span><br><span class="line"><span class="string">        location.href = &quot;/brand-demo/addBrand.jsp&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="3-添加"><a href="#3-添加" class="headerlink" title="3. 添加"></a>3. 添加</h4><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724150458379.png" alt="image-20240724150458379"></p><p>写网页 addBrand.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: V<span class="string">&#x27;jie</span></span><br><span class="line"><span class="string">  Date: 2024/7/22</span></span><br><span class="line"><span class="string">  Time: 19:19</span></span><br><span class="line"><span class="string">  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="string">--%&gt;</span></span><br><span class="line"><span class="string">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;添加品牌&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;添加品牌&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/brand-demo/addServlet&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">    品牌名称：&lt;input name=&quot;brandName&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    企业名称：&lt;input name=&quot;companyName&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    排序：&lt;input name=&quot;ordered&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    描述信息：&lt;textarea rows=&quot;5&quot; cols=&quot;20&quot; name=&quot;description&quot;&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    状态：</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;0&quot;&gt;禁用</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;1&quot;&gt;启用&lt;br&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>Step1：Dao层<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724150557724.png" alt="image-20240724150557724"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_brand values(null,#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><p>Step2：Service层 实现add业务逻辑</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724150715195.png" alt="image-20240724150715195"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>&#123;</span><br><span class="line">      <span class="comment">//2. 获取SqlSession</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">      <span class="comment">//3. 获取BrandMapper</span></span><br><span class="line">      <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4. 调用方法</span></span><br><span class="line">      mapper.add(brand);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line">      <span class="comment">//释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Step3：Web层</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724150846514.png" alt="image-20240724150846514"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/addServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理POST请求的乱码问题</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 接收表单提交的数据，封装为一个Brand对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;brandName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;companyName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ordered</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;ordered&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装为一个Brand对象</span></span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setBrandName(brandName);</span><br><span class="line">        brand.setCompanyName(companyName);</span><br><span class="line">        brand.setOrdered(Integer.parseInt(ordered));</span><br><span class="line">        brand.setDescription(description);</span><br><span class="line">        brand.setStatus(Integer.parseInt(status));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 调用service 完成添加</span></span><br><span class="line">        service.add(brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 转发到查询所有Servlet</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/selectAllServlet&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-修改-回显数据"><a href="#4-修改-回显数据" class="headerlink" title="4. 修改-回显数据"></a>4. 修改-回显数据</h4><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724151301547.png" alt="image-20240724151301547"></p><p>修改- 首先要实现回显数据，顾名思义就是 修改页面 保留原来的数据信息 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">update.jsp</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: V<span class="string">&#x27;jie</span></span><br><span class="line"><span class="string">  Date: 2024/7/22</span></span><br><span class="line"><span class="string">  Time: 19:19</span></span><br><span class="line"><span class="string">  To change this template use File | Settings | File Templates.</span></span><br><span class="line"><span class="string">--%&gt;</span></span><br><span class="line"><span class="string">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;修改品牌&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;修改品牌&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/brand-demo/updateServlet&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;%--隐藏域，提交id--%&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;$&#123;brand.id&#125;&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    品牌名称：&lt;input name=&quot;brandName&quot; value=&quot;$&#123;brand.brandName&#125;&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    企业名称：&lt;input name=&quot;companyName&quot; value=&quot;$&#123;brand.companyName&#125;&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    排序：&lt;input name=&quot;ordered&quot; value=&quot;$&#123;brand.ordered&#125;&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    描述信息：&lt;textarea rows=&quot;5&quot; cols=&quot;20&quot; name=&quot;description&quot;&gt;$&#123;brand.description&#125;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    状态：</span></span><br><span class="line"><span class="string">    &lt;c:if test=&quot;$&#123;brand.status == 0&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;0&quot; checked&gt;禁用</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;1&quot;&gt;启用&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;/c:if&gt;</span></span><br><span class="line"><span class="string">    &lt;c:if test=&quot;$&#123;brand.status == 1&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;0&quot;&gt;禁用</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;radio&quot; name=&quot;status&quot; value=&quot;1&quot; checked&gt;启用&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;/c:if&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>Step1: Dao层 在BrandMapper 中 编写操作数据库的映射代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from tb_brand where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;brandResultMap&quot;)</span></span><br><span class="line">Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>Step2：Service层 在BrandService.java 中 实现业务逻辑 根据id查询 实现回显数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="comment">// 调用BrandMapper.selectAll()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取BrandMapper</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 调用方法</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> mapper.selectById(id);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step3：Web层 </p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724152532115.png" alt="image-20240724152532115"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectByIdServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 接收id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 调用service查询</span></span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> service.selectById(Integer.parseInt(id));</span><br><span class="line">        <span class="comment">//3. 存储到request中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 转发到update.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/update.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> <strong>代码分析</strong></p><p>该代码是一个Servlet，它负责接收一个ID参数，然后通过Service层查询对应的品牌数据，并将数据转发到一个JSP页面进行显示。整个过程遵循MVC模式。</p><p> <strong>MVC模式分析</strong></p><p>在MVC模式中，Servlet扮演的是Controller的角色。它负责接收请求，处理业务逻辑，并将数据转发到View层（在本例中是JSP页面）。</p><ul><li>Model层：在本例中，Model层是由<code>Brand</code>类和<code>BrandService</code>类组成的。<code>Brand</code>类代表了品牌数据，而<code>BrandService</code>类负责查询和操作品牌数据。</li><li>View层：在本例中，View层是由<code>update.jsp</code>页面组成的。该页面负责显示品牌数据。</li><li><p>Controller层：在本例中，Controller层是由<code>SelectByIdServlet</code>类组成的。该类负责接收请求，处理业务逻辑，并将数据转发到View层。</p><p><strong>代码逻辑分析</strong></p></li></ul><p>代码的逻辑如下：</p><ol><li>接收ID参数：Servlet接收一个ID参数，该参数用于查询对应的品牌数据。</li><li>查询品牌数据：Servlet通过<code>BrandService</code>类查询对应的品牌数据。</li><li>存储数据：Servlet将查询到的品牌数据存储到request对象中。</li><li><p>转发数据：Servlet将request对象转发到<code>update.jsp</code>页面。</p><p><strong>Servlet功能分析</strong></p></li></ol><p>Servlet的功能如下：</p><ul><li>处理GET请求：Servlet负责处理GET请求，并将请求参数传递给Service层进行处理。</li><li>查询品牌数据：Servlet通过Service层查询对应的品牌数据。</li><li><p>准备数据：Servlet将查询到的品牌数据存储到request对象中，并将其转发到View层。</p><p><strong>总结</strong></p></li></ul><p>该代码是一个Servlet，它负责接收一个ID参数，然后通过Service层查询对应的品牌数据，并将数据转发到一个JSP页面进行显示。整个过程遵循MVC模式。通过分析代码逻辑和MVC模式，可以更好地理解Servlet的功能和作用。</p></blockquote><h4 id="5-修改-修改数据"><a href="#5-修改-修改数据" class="headerlink" title="5.修改-修改数据"></a>5.修改-修改数据</h4><p>前面一步实现 回显数据，</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724153126966.png" alt="image-20240724153126966"></p><p>Step1：Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Update(&quot;update tb_brand set brand_name = #&#123;brandName&#125;,company_name = #&#123;companyName&#125;,ordered = #&#123;ordered&#125;,description = #&#123;description&#125;,status = #&#123;status&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><p>Step2：Service层 在BrandService.java 业务逻辑层 实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>&#123;</span><br><span class="line">    <span class="comment">//2. 获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取BrandMapper</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 调用方法</span></span><br><span class="line">    mapper.update(brand);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step3：Web层 UpdateServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/updateServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理POST请求的乱码问题</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 接收表单提交的数据，封装为一个Brand对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;brandName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;companyName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ordered</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;ordered&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装为一个Brand对象</span></span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setId(Integer.parseInt(id));</span><br><span class="line">        brand.setBrandName(brandName);</span><br><span class="line">        brand.setCompanyName(companyName);</span><br><span class="line">        brand.setOrdered(Integer.parseInt(ordered));</span><br><span class="line">        brand.setDescription(description);</span><br><span class="line">        brand.setStatus(Integer.parseInt(status));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 调用service 完成修改</span></span><br><span class="line">        service.update(brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 转发到查询所有Servlet</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/selectAllServlet&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-练习，实现删除数据功能"><a href="#6-练习，实现删除数据功能" class="headerlink" title="6.练习，实现删除数据功能"></a>6.练习，实现删除数据功能</h4><p>为了实现删除数据的功能，我们需要在<code>BrandMapper</code>接口中添加一个删除方法，在<code>BrandService</code>类中添加一个删除方法，并在<code>DeleteServlet</code>类中处理删除请求。</p><p>Step1：BrandMapper接口添加删除方法<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724155724699.png" alt="image-20240724155724699"></p><p>Step2：在BrandService中添加 删除方法</p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724160037678.png" alt="image-20240724160037678"></p><p>Step3：Web层 实现DeleteServlet<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724160731156.png" alt="image-20240724160731156"><br>把重定向改成 转发到查询所有Servlet 因为重定向它会跳转页面，跳转的页面没实现就会错误，虽然实现了删除，转发到查询所有Servlet 就会在当前页面，并且删除后显示最新的数据。</p><p>Step4：删除按钮 在brand.jsp页面添加删除按钮<br><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image-20240724161634279.png" alt="image-20240724161634279"><br>按照修改 写就ok了 </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构模拟题</title>
      <link href="/posts/d388.html"/>
      <url>/posts/d388.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构模拟题"><a href="#数据结构模拟题" class="headerlink" title="数据结构模拟题"></a>数据结构模拟题</h2><h3 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h3><h4 id="1-数据结构作为计算机的一门学科，主要研究数据的逻辑结构、对各种逻辑结构进行的运算以及（）"><a href="#1-数据结构作为计算机的一门学科，主要研究数据的逻辑结构、对各种逻辑结构进行的运算以及（）" class="headerlink" title="1.数据结构作为计算机的一门学科，主要研究数据的逻辑结构、对各种逻辑结构进行的运算以及（）"></a>1.数据结构作为计算机的一门学科，主要研究数据的逻辑结构、对各种逻辑结构进行的运算以及（）</h4><p><strong>选项:</strong><br>A.计算方法<br>B.数据的存储结构<br>C.逻辑结构<br>D.数据映像</p><p><strong>答案:</strong>B.数据的存储结构</p><p><strong>解析:</strong>数据结构不仅研究数据的逻辑结构，还研究如何在计算机中存储这些数据，即数据的存储结构。</p><h4 id="2-任一个有向图的拓扑序列"><a href="#2-任一个有向图的拓扑序列" class="headerlink" title="2.任一个有向图的拓扑序列"></a>2.任一个有向图的拓扑序列</h4><p><strong>选项:</strong><br>A.有一个<br>B.可能不存在<br>C.有一个或多个<br>D.一定有多个</p><p><strong>答案:</strong>B.可能不存在</p><p><strong>解析:</strong>任一个有向图的拓扑序列可能不存在。这种情况发生在图中存在环（循环）的情况下。拓扑排序是对有向无环图（DAG）的一种线性排序。对于一个DAG，可能存在一个或多个拓扑序列。</p><h4 id="3-strreplace-s-t-r-的作用是"><a href="#3-strreplace-s-t-r-的作用是" class="headerlink" title="3.strreplace(s,t,r)的作用是"></a>3.<code>strreplace(s,t,r)</code>的作用是</h4><p><strong>选项:</strong><br>A.求子串<br>B.串显示<br>C.串替换<br>D.串创建</p><p><strong>答案:</strong>C.串替换</p><p><strong>解析:</strong><code>strreplace</code>函数用于将字符串<code>s</code>中的子串<code>t</code>替换为子串<code>r</code>。</p><h4 id="4-下列对队列的描述正确的是"><a href="#4-下列对队列的描述正确的是" class="headerlink" title="4.下列对队列的描述正确的是"></a>4.下列对队列的描述正确的是</h4><p><strong>选项:</strong><br>A.队列按先进后出原则组织数据<br>B.队列属于非线性表<br>C.队列按先进先出的原则组织数据<br>D.队列在队尾删除数据</p><p><strong>答案:</strong>C.队列按先进先出的原则组织数据</p><p><strong>解析:</strong>队列是一种先进先出（FIFO）的线性表，数据在队尾插入，在队头删除。</p><h4 id="5-串显示的操作算法是"><a href="#5-串显示的操作算法是" class="headerlink" title="5.串显示的操作算法是"></a>5.串显示的操作算法是</h4><p><strong>选项:</strong><br>A.<code>strreplace(s,t,r)</code><br>B.<code>strdelete(s,i,t)</code><br>C.<code>strcreate(h,n)</code><br>D.<code>strdisplay(s)</code></p><p><strong>答案:</strong>D.<code>strdisplay(s)</code></p><p><strong>解析:</strong><code>strdisplay</code>函数用于显示字符串的内容。</p><h4 id="6-某二叉树有N个度为2的结点，则该二叉树中的叶子结点数为"><a href="#6-某二叉树有N个度为2的结点，则该二叉树中的叶子结点数为" class="headerlink" title="6.某二叉树有N个度为2的结点，则该二叉树中的叶子结点数为"></a>6.某二叉树有N个度为2的结点，则该二叉树中的叶子结点数为</h4><p><strong>选项:</strong><br>A.N-1<br>B.N+1<br>C.N/2<br>D.2N</p><p><strong>答案:</strong>B.N+1</p><p><strong>解析:</strong>在一棵二叉树中，度为2的结点数加1等于叶子结点数。</p><h4 id="7-下列数据结构中，按先进先出原则组织数据的是"><a href="#7-下列数据结构中，按先进先出原则组织数据的是" class="headerlink" title="7.下列数据结构中，按先进先出原则组织数据的是"></a>7.下列数据结构中，按先进先出原则组织数据的是</h4><p><strong>选项:</strong><br>A.栈<br>B.线性链表<br>C.队列<br>D.循环链表</p><p><strong>答案:</strong>C.队列</p><p><strong>解析:</strong>队列是一种先进先出（FIFO）的数据结构。</p><h4 id="8-假定一个链式队列的队头和队尾指针分别为front和rear，则判断队空的条件为"><a href="#8-假定一个链式队列的队头和队尾指针分别为front和rear，则判断队空的条件为" class="headerlink" title="8.假定一个链式队列的队头和队尾指针分别为front和rear，则判断队空的条件为"></a>8.假定一个链式队列的队头和队尾指针分别为<code>front</code>和<code>rear</code>，则判断队空的条件为</h4><p><strong>选项:</strong><br>A.<code>front!=NULL</code><br>B.<code>front==rear</code><br>C.<code>front==NULL</code><br>D.<code>rear!=NULL</code></p><p><strong>答案:</strong>C.<code>front==NULL</code></p><p><strong>解析:</strong>在链式队列中，当队头指针<code>front</code>为<code>NULL</code>时，表示队列为空。</p><h4 id="9-已知某二叉树的后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是"><a href="#9-已知某二叉树的后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是" class="headerlink" title="9.已知某二叉树的后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是"></a>9.已知某二叉树的后序遍历序列是<code>dabec</code>，中序遍历序列是<code>debac</code>，它的前序遍历序列是</h4><p><strong>选项:</strong><br>A.<code>decab</code><br>B.<code>acbed</code><br>C.<code>cedba</code><br>D.<code>deabc</code></p><p><strong>答案:</strong>C<code>acbed</code></p><p><strong>解析:</strong>根据后序遍历和中序遍历序列，可以构造出二叉树并得到其前序遍历序列。</p><h4 id="10-图的广度优先搜索类似于树的（）次序遍历"><a href="#10-图的广度优先搜索类似于树的（）次序遍历" class="headerlink" title="10.图的广度优先搜索类似于树的（）次序遍历"></a>10.图的广度优先搜索类似于树的（）次序遍历</h4><p><strong>选项:</strong><br>A.中根<br>B.先根<br>C.层次<br>D.后根</p><p><strong>答案:</strong>C.层次</p><p><strong>解析:</strong>广度优先搜索（BFS）类似于树的层次遍历，即逐层访问节点。</p><h4 id="11-一个栈的入栈序列是a-b-c-d-e-则出栈不可能的输出序列是"><a href="#11-一个栈的入栈序列是a-b-c-d-e-则出栈不可能的输出序列是" class="headerlink" title="11.一个栈的入栈序列是a,b,c,d,e,则出栈不可能的输出序列是"></a>11.一个栈的入栈序列是a,b,c,d,e,则出栈不可能的输出序列是</h4><p><strong>选项:</strong><br>A.decba<br>B.edcba<br>C.abcde<br>D.dceab</p><p><strong>答案:</strong>D.dceab</p><p><strong>解析:</strong>栈的操作遵循后进先出（LIFO）原则。序列dceab无法通过栈的操作实现，因为在d出栈后，c和e之间的顺序无法保持。</p><h4 id="12-下列属于错误的是"><a href="#12-下列属于错误的是" class="headerlink" title="12.下列属于错误的是"></a>12.下列属于错误的是</h4><p><strong>选项:</strong><br>A.度为0的结点称为叶子结点<br>B.树中每个结点具有的子树个数称为该结点的度<br>C.以上说法都不对<br>D.度为0的结点称为分支结点</p><p><strong>答案:</strong>D.度为0的结点称为分支结点</p><p><strong>解析:</strong>度为0的结点称为叶子结点，而不是分支结点。</p><h4 id="13-串连接的操作算法是"><a href="#13-串连接的操作算法是" class="headerlink" title="13.串连接的操作算法是"></a>13.串连接的操作算法是</h4><p><strong>选项:</strong><br>A.<code>substr(s,i,k)</code><br>B.<code>strconcat(s1,s2)</code><br>C.<code>strinsert(s,i,t)</code><br>D.<code>strIndex(s,t)</code></p><p><strong>答案:</strong>B.<code>strconcat(s1,s2)</code></p><p><strong>解析:</strong><code>strconcat</code>函数用于将两个字符串<code>s1</code>和<code>s2</code>连接起来。</p><h4 id="14-算法的空间复杂度是指"><a href="#14-算法的空间复杂度是指" class="headerlink" title="14.算法的空间复杂度是指"></a>14.算法的空间复杂度是指</h4><p><strong>选项:</strong><br>A.算法程序中的指令条数<br>B.算法程序的长度<br>C.执行算法所需要的内存空间<br>D.算法程序所占的存储空间</p><p><strong>答案:</strong>C.执行算法所需要的内存空间</p><p><strong>解析:</strong>空间复杂度是指算法在运行过程中所需的内存空间。</p><h4 id="15-在一棵高度为h-假定树根结点的层号为0-的完全二叉树中，所含结点个数不小于-。"><a href="#15-在一棵高度为h-假定树根结点的层号为0-的完全二叉树中，所含结点个数不小于-。" class="headerlink" title="15.在一棵高度为h(假定树根结点的层号为0)的完全二叉树中，所含结点个数不小于()。"></a>15.在一棵高度为h(假定树根结点的层号为0)的完全二叉树中，所含结点个数不小于()。</h4><p><strong>选项:</strong><br>A.2h+1<br>B.2h-1<br>C.2h<br>D.2(h-1)</p><p><strong>答案:</strong>C.2h</p><p><strong>解析:</strong>完全二叉树的结点个数至少为<script type="math/tex">2^h</script>。</p><h4 id="16-locate-head-x-在单链表中的作用是"><a href="#16-locate-head-x-在单链表中的作用是" class="headerlink" title="16.locate(head,x)在单链表中的作用是"></a>16.<code>locate(head,x)</code>在单链表中的作用是</h4><p><strong>选项:</strong><br>A.求表长<br>B.读取表结点<br>C.插入结点<br>D.按值查找</p><p><strong>答案:</strong>D.按值查找</p><p><strong>解析:</strong><code>locate</code>函数用于在单链表中按值查找结点。</p><h4 id="17-入栈的操作是"><a href="#17-入栈的操作是" class="headerlink" title="17.入栈的操作是"></a>17.入栈的操作是</h4><p><strong>选项:</strong><br>A.<code>gettop(s)</code><br>B.<code>display(s)</code><br>C.<code>push(s,x)</code><br>D.<code>pop(s)</code></p><p><strong>答案:</strong>C.<code>push(s,x)</code></p><p><strong>解析:</strong><code>push</code>操作用于将元素压入栈顶。</p><h4 id="18-按照二叉树的定义，具有3个结点的二叉树的形态有几种"><a href="#18-按照二叉树的定义，具有3个结点的二叉树的形态有几种" class="headerlink" title="18.按照二叉树的定义，具有3个结点的二叉树的形态有几种"></a>18.按照二叉树的定义，具有3个结点的二叉树的形态有几种</h4><p><strong>选项:</strong><br>A.4<br>B.3<br>C.6<br>D.5</p><p><strong>答案:</strong>D.5</p><p><strong>解析:</strong>具有3个结点的二叉树有5种不同的形态。</p><h4 id="19-串创建的操作算法是"><a href="#19-串创建的操作算法是" class="headerlink" title="19.串创建的操作算法是"></a>19.串创建的操作算法是</h4><p><strong>选项:</strong><br>A.<code>strreplace(s,t,r)</code><br>B.<code>strdelete(s,i,t)</code><br>C.<code>strcreate(h,n)</code><br>D.<code>strdisplay(s)</code></p><p><strong>答案:</strong>C.<code>strcreate(h,n)</code></p><p><strong>解析:</strong><code>strcreate</code>函数用于创建一个字符串。</p><h4 id="20-线性表采用链式存储结构时，要求内存中可用存储单元的地址"><a href="#20-线性表采用链式存储结构时，要求内存中可用存储单元的地址" class="headerlink" title="20.线性表采用链式存储结构时，要求内存中可用存储单元的地址"></a>20.线性表采用链式存储结构时，要求内存中可用存储单元的地址</h4><p><strong>选项:</strong><br>A.部分地址必须是连续的<br>B.必须是连续的<br>C.连续或不连续都可以<br>D.一定是不连续的</p><p><strong>答案:</strong>C.连续或不连续都可以</p><p><strong>解析:</strong>链式存储结构不要求内存单元地址连续，可以是连续的或不连续的。</p><h4 id="21-串的长度是"><a href="#21-串的长度是" class="headerlink" title="21.串的长度是"></a>21.串的长度是</h4><p><strong>选项:</strong><br>A.串中不同字母的个数<br>B.串中不同字符的个数<br>C.串中所含字符的个数<br>D.串中所含字符的个数且字符个数大于0</p><p><strong>答案:</strong>C.串中所含字符的个数</p><p><strong>解析:</strong>串的长度是指串中所含字符的总个数，包括重复的字符。</p><h4 id="22-算法的时间复杂度是指"><a href="#22-算法的时间复杂度是指" class="headerlink" title="22.算法的时间复杂度是指"></a>22.算法的时间复杂度是指</h4><p><strong>选项:</strong><br>A.算法程序的长度<br>B.执行算法程序所需要的时间<br>C.算法程序中的指令条数<br>D.算法执行过程中所需要的基本运算次数</p><p><strong>答案:</strong>D.算法执行过程中所需要的基本运算次数</p><p><strong>解析:</strong>时间复杂度是指算法执行过程中所需要的基本运算次数，而不是实际所需的时间，因为实际时间还受其他因素影响。</p><h4 id="23-输出栈中元素的基本操作是"><a href="#23-输出栈中元素的基本操作是" class="headerlink" title="23.输出栈中元素的基本操作是"></a>23.输出栈中元素的基本操作是</h4><p><strong>选项:</strong><br>A.<code>gettop(s)</code><br>B.<code>display(s)</code><br>C.<code>push(s,x)</code><br>D.<code>pop(s)</code></p><p><strong>答案:</strong>B.<code>display(s)</code></p><p><strong>解析:</strong>关键词是输出，所以是B<code>pop</code>操作用于从栈中移除并返回栈顶元素。</p><h4 id="24-数组a-3-中有多少个元素"><a href="#24-数组a-3-中有多少个元素" class="headerlink" title="24.数组a{3}中有多少个元素"></a>24.数组a{3}中有多少个元素</h4><p><strong>选项:</strong><br>A.8<br>B.15<br>C.12<br>D.10</p><p><strong>答案:</strong>B.15</p><p><strong>解析:</strong>数组`a{3}有3行5列，共3*5=15个元素。</p><h4 id="25-子串定位的操作算法是"><a href="#25-子串定位的操作算法是" class="headerlink" title="25.子串定位的操作算法是"></a>25.子串定位的操作算法是</h4><p><strong>选项:</strong><br>A.<code>substr(s,i,k)</code><br>B.<code>strconcat(s1,s4)</code><br>C.<code>strinsert(s,i,t)</code><br>D.<code>strIndex(s,t)</code></p><p><strong>答案:</strong>D.<code>strIndex(s,t)</code></p><p><strong>解析:</strong><code>strIndex</code>函数用于在字符串<code>s</code>中查找子串<code>t</code>的位置。</p><h4 id="26-出栈的操作是"><a href="#26-出栈的操作是" class="headerlink" title="26.出栈的操作是"></a>26.出栈的操作是</h4><p><strong>选项:</strong><br>A.<code>gettop(s)</code><br>B.<code>display(s)</code><br>C.<code>push(s,x)</code><br>D.<code>pop(s)</code></p><p><strong>答案:</strong>D.<code>pop(s)</code></p><p><strong>解析:</strong><code>pop</code>操作用于从栈中移除并返回栈顶元素。</p><h4 id="27-串复制的操作算法是"><a href="#27-串复制的操作算法是" class="headerlink" title="27.串复制的操作算法是"></a>27.串复制的操作算法是</h4><p><strong>选项:</strong><br>A.<code>strlength(s)</code><br>B.<code>strassigh(s,t)</code><br>C.<code>strcopy(s,t)</code><br>D.<code>strcmp(s1,s5)</code></p><p><strong>答案:</strong>C.<code>strcopy(s,t)</code></p><p><strong>解析:</strong><code>strcopy</code>函数用于将字符串<code>t</code>复制到字符串<code>s</code>中。</p><h4 id="28-子串插入的操作算法是"><a href="#28-子串插入的操作算法是" class="headerlink" title="28.子串插入的操作算法是"></a>28.子串插入的操作算法是</h4><p><strong>选项:</strong><br>A.<code>substr(s,i,k)</code><br>B.<code>strconcat(s1,s5)</code><br>C.<code>strinsert(s,i,t)</code><br>D.<code>strIndex(s,t)</code></p><p><strong>答案:</strong>C.<code>strinsert(s,i,t)</code></p><p><strong>解析:</strong><code>strinsert</code>函数用于在字符串<code>s</code>的第<code>i</code>个位置插入子串<code>t</code>。</p><h4 id="29-算法的有穷性是指"><a href="#29-算法的有穷性是指" class="headerlink" title="29.算法的有穷性是指"></a>29.算法的有穷性是指</h4><p><strong>选项:</strong><br>A.算法程序所处理的数据量有限<br>B.算法程序的运行时间有限<br>C.算法只能被有限的用户使用<br>D.算法程序的长度是有限的</p><p><strong>答案:</strong>B.算法程序的运行时间有限</p><p><strong>解析:</strong>算法的有穷性是指算法在有限的步骤内完成，即运行时间是有限的。</p><h4 id="30-循环链表的优点是"><a href="#30-循环链表的优点是" class="headerlink" title="30.循环链表的优点是"></a>30.循环链表的优点是</h4><p><strong>选项:</strong><br>A.从表中任一结点出发都能访问到整个链表<br>B.不再需要头指针了<br>C.已知某个结点的位置后，能够容易的找到它的直接前件<br>D.在进行插入、删除运算时，能更好的保证链表不断开</p><p><strong>答案:</strong>A.从表中任一结点出发都能访问到整个链表</p><p><strong>解析:</strong>循环链表的一个主要优点是从任一结点出发都能访问到整个链表，这使得某些操作更加方便。</p><h4 id="31-在单链表中增加头结点的目的是"><a href="#31-在单链表中增加头结点的目的是" class="headerlink" title="31.在单链表中增加头结点的目的是"></a>31.在单链表中增加头结点的目的是</h4><p><strong>选项:</strong><br>A.使单链表至少有一个结点<br>B.方便运算的实现<br>C.说明单链表是线性表的链式存储实现<br>D.结点中首结点的位置</p><p><strong>答案:</strong>B.方便运算的实现</p><p><strong>解析:</strong>增加头结点可以简化链表的操作，例如插入和删除操作，因为头结点可以统一处理链表的边界情况。</p><h4 id="32-在算法中，对需要执行的每一步操作，必须给出清楚、严格的规定。这属于算法的"><a href="#32-在算法中，对需要执行的每一步操作，必须给出清楚、严格的规定。这属于算法的" class="headerlink" title="32.在算法中，对需要执行的每一步操作，必须给出清楚、严格的规定。这属于算法的"></a>32.在算法中，对需要执行的每一步操作，必须给出清楚、严格的规定。这属于算法的</h4><p><strong>选项:</strong><br>A.可行性<br>B.正当性<br>C.有穷性<br>D.确定性</p><p><strong>答案:</strong>D.确定性</p><p><strong>解析:</strong>算法的确定性要求每一步操作都有明确的定义和唯一的执行路径。</p><h4 id="33-关于树的说法错误的是"><a href="#33-关于树的说法错误的是" class="headerlink" title="33.关于树的说法错误的是"></a>33.关于树的说法错误的是</h4><p><strong>选项:</strong><br>A.树只有一个根结点<br>B.树是由多个结点构成的有限集合<br>C.树中结点较多时每个结点都是某一颗子树的根<br>D.仅有一个结点的树是最小树</p><p><strong>答案:</strong>C.树中结点较多时每个结点都是某一颗子树的根</p><p><strong>解析:</strong>树中并不是每个结点都是某一颗子树的根，只有那些有子结点的结点才是子树的根。</p><h4 id="34-一个队列的进队列顺序是1-4-3-2，则出队列顺序为"><a href="#34-一个队列的进队列顺序是1-4-3-2，则出队列顺序为" class="headerlink" title="34.一个队列的进队列顺序是1,4,3,2，则出队列顺序为"></a>34.一个队列的进队列顺序是1,4,3,2，则出队列顺序为</h4><p><strong>选项:</strong><br>A.2，3，4，1<br>B.1，4，3，2<br>C.4，3，2，1<br>D.1，2，3，4</p><p><strong>答案:</strong>B.1，4，3，2</p><p><strong>解析:</strong>队列遵循先进先出（FIFO）原则，因此出队列顺序与进队列顺序相同。</p><h4 id="35-算法分析的目的是"><a href="#35-算法分析的目的是" class="headerlink" title="35.算法分析的目的是"></a>35.算法分析的目的是</h4><p><strong>选项:</strong><br>A.找出算法中输入和输出之间的关系<br>B.找出数据结构的合理性<br>C.分析算法的效率以求改进<br>D.分析算法的可读性</p><p><strong>答案:</strong>C.分析算法的效率以求改进</p><p><strong>解析:</strong>算法分析的主要目的是评估算法的效率，包括时间复杂度和空间复杂度，以便进行优化和改进。</p><h4 id="36-子串删除的操作算法是"><a href="#36-子串删除的操作算法是" class="headerlink" title="36.子串删除的操作算法是"></a>36.子串删除的操作算法是</h4><p><strong>选项:</strong><br>A.<code>strreplace(s,t,r)</code><br>B.<code>strdelete(s,i,t)</code><br>C.<code>strcreate(h,n)</code><br>D.<code>strdisplay(s)</code></p><p><strong>答案:</strong>B.<code>strdelete(s,i,t)</code></p><p><strong>解析:</strong><code>strdelete</code>函数用于从字符串<code>s</code>中删除从位置<code>i</code>开始长度为<code>t</code>的子串。</p><h4 id="37-设有两个串t和p，求p在t中首次出现的位置的运算叫做"><a href="#37-设有两个串t和p，求p在t中首次出现的位置的运算叫做" class="headerlink" title="37.设有两个串t和p，求p在t中首次出现的位置的运算叫做"></a>37.设有两个串<code>t</code>和<code>p</code>，求<code>p</code>在<code>t</code>中首次出现的位置的运算叫做</h4><p><strong>选项:</strong><br>A.模式匹配<br>B.求子串<br>C.串连接<br>D.串替换</p><p><strong>答案:</strong>A.模式匹配</p><p><strong>解析:</strong>模式匹配是指在字符串<code>t</code>中查找子串<code>p</code>首次出现的位置。</p><h4 id="38-下面程序段的时间复杂度为（）"><a href="#38-下面程序段的时间复杂度为（）" class="headerlink" title="38.下面程序段的时间复杂度为（）"></a>38.下面程序段的时间复杂度为（）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">a[i][j]=i*j;</span><br></pre></td></tr></table></figure><p><strong>选项:</strong><br>A.<script type="math/tex">O(n^2)</script><br>B.<script type="math/tex">O(m^2)</script><br>C.<script type="math/tex">O(m+n)</script><br>D.<script type="math/tex">O(m*n)</script></p><p><strong>答案:</strong>D.<script type="math/tex">O(m*n)</script></p><p><strong>解析:</strong>该程序段有两个嵌套循环，外层循环执行<script type="math/tex">m</script>次，内层循环执行<script type="math/tex">n</script>次，因此总的时间复杂度为<script type="math/tex">O(m*n)</script>。</p><h4 id="39-初始化栈的操作是"><a href="#39-初始化栈的操作是" class="headerlink" title="39.初始化栈的操作是"></a>39.初始化栈的操作是</h4><p><strong>选项:</strong><br>A.<code>gettop(s)</code><br>B.<code>Initstack(s)</code><br>C.<code>push(s,x)</code><br>D.<code>pop(s)</code></p><p><strong>答案:</strong>B.<code>Initstack(s)</code></p><p><strong>解析:</strong><code>Initstack</code>函数用于初始化一个空栈。</p><h4 id="40-实现递归调用中的存储分配通常用"><a href="#40-实现递归调用中的存储分配通常用" class="headerlink" title="40.实现递归调用中的存储分配通常用"></a>40.实现递归调用中的存储分配通常用</h4><p><strong>选项:</strong><br>A.堆<br>B.栈<br>C.链表<br>D.数组</p><p><strong>答案:</strong>B.栈</p><p><strong>解析:</strong>递归调用时，每次函数调用都会在栈上分配一个新的栈帧，用于存储函数的局部变量和返回地址。</p><h4 id="41-数据在计算机中存储器内表示时，物理地址和逻辑地址相同并且连续的，称为（）"><a href="#41-数据在计算机中存储器内表示时，物理地址和逻辑地址相同并且连续的，称为（）" class="headerlink" title="41.数据在计算机中存储器内表示时，物理地址和逻辑地址相同并且连续的，称为（）"></a>41.数据在计算机中存储器内表示时，物理地址和逻辑地址相同并且连续的，称为（）</h4><p><strong>选项:</strong><br>A.顺序存储结构<br>B.逻辑结构<br>C.以上都对<br>D.链式存储结构</p><p><strong>答案:</strong>A.顺序存储结构</p><p><strong>解析:</strong>顺序存储结构是指数据在内存中按顺序存储，物理地址和逻辑地址相同且连续。</p><h4 id="42-子串替换的操作算法是"><a href="#42-子串替换的操作算法是" class="headerlink" title="42.子串替换的操作算法是"></a>42.子串替换的操作算法是</h4><p><strong>选项:</strong><br>A.<code>strreplace(s,t,r)</code><br>B.<code>strdelete(s,i,t)</code><br>C.<code>strcreate(h,n)</code><br>D.<code>strdisplay(s)</code></p><p><strong>答案:</strong>A.<code>strreplace(s,t,r)</code></p><p><strong>解析:</strong><code>strreplace</code>函数用于将字符串<code>s</code>中的子串<code>t</code>替换为子串<code>r</code>。</p><h4 id="43-下列不是树的表示方法的是"><a href="#43-下列不是树的表示方法的是" class="headerlink" title="43.下列不是树的表示方法的是"></a>43.下列不是树的表示方法的是</h4><p><strong>选项:</strong><br>A.文氏图法<br>B.倒悬树法<br>C.图表法<br>D.括号法</p><p><strong>答案:</strong>C.图表法</p><p><strong>解析:</strong>树状表示法、文氏图表示法、凹入表示法、括号表示法(垃圾AI认为的是A给爷整麻了)</p><h4 id="44-用链表表示线性表的优点是"><a href="#44-用链表表示线性表的优点是" class="headerlink" title="44.用链表表示线性表的优点是"></a>44.用链表表示线性表的优点是</h4><p><strong>选项:</strong><br>A.花费的存储空间较顺序存储少<br>B.便于随机存取<br>C.数据元素的物理顺序与逻辑顺序相同<br>D.便于插入和删除操作</p><p><strong>答案:</strong>D.便于插入和删除操作</p><p><strong>解析:</strong>链表的主要优点是插入和删除操作方便，不需要移动其他元素。</p><h4 id="45-读取栈中元素的基本操作是"><a href="#45-读取栈中元素的基本操作是" class="headerlink" title="45.读取栈中元素的基本操作是"></a>45.读取栈中元素的基本操作是</h4><p><strong>选项:</strong><br>A.<code>gettop(s)</code><br>B.<code>display(s)</code><br>C.<code>push(s,x)</code><br>D.<code>pop(s)</code></p><p><strong>答案:</strong>A.<code>gettop(s)</code></p><p><strong>解析:</strong><code>gettop</code>操作用于读取栈顶元素而不删除它。</p><h4 id="46-已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是"><a href="#46-已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是" class="headerlink" title="46.已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是"></a>46.已知二叉树后序遍历序列是<code>dabec</code>，中序遍历序列是<code>debac</code>，它的前序遍历序列是</h4><p><strong>选项:</strong><br>A.<code>decab</code><br>B.<code>acbed</code><br>C.<code>cedba</code><br>D.<code>deabc</code></p><p><strong>答案:</strong>C.<code>cedba</code></p><p><strong>解析:</strong>根据后序遍历和中序遍历序列，可以构造出二叉树并得到其前序遍历序列。</p><h4 id="47-具有n个顶点的有向无环图最多可包含-条有向边。"><a href="#47-具有n个顶点的有向无环图最多可包含-条有向边。" class="headerlink" title="47.具有n个顶点的有向无环图最多可包含()条有向边。"></a>47.具有n个顶点的有向无环图最多可包含()条有向边。</h4><p><strong>选项:</strong><br>A.n<br>B.n-1<br>C.n(n-1)<br>D.n(n-1)/2</p><p><strong>答案:</strong>D.n(n-1)/2</p><p><strong>解析:</strong>具有n个顶点的有向无环图（DAG）最多可以包含的有向边数是所有顶点之间的可能边数减去环形成的情况。对于一个有n个顶点的无环图，每对顶点之间最多只能有一个方向的边，而不能形成环，因此最多的有向边数是n(n-1)/2条。</p><h4 id="48-下列属于队列的基本操作的是（）"><a href="#48-下列属于队列的基本操作的是（）" class="headerlink" title="48.下列属于队列的基本操作的是（）"></a>48.下列属于队列的基本操作的是（）</h4><p><strong>选项:</strong><br>A.取出最近进队的元素<br>B.删除队首元素<br>C.排序<br>D.在最早入列元素之前插入元素</p><p><strong>答案:</strong>B.删除队首元素</p><p><strong>解析:</strong>队列的基本操作包括插入（入队）和删除（出队），删除队首元素是出队操作。</p><h4 id="49-求子串的操作算法是"><a href="#49-求子串的操作算法是" class="headerlink" title="49.求子串的操作算法是"></a>49.求子串的操作算法是</h4><p><strong>选项:</strong><br>A.<code>substr(s,i,k)</code><br>B.<code>strconcat(s1,s3)</code><br>C.<code>strinsert(s,i,t)</code><br>D.<code>strIndex(s,t)</code></p><p><strong>答案:</strong>A.<code>substr(s,i,k)</code></p><p><strong>解析:</strong><code>substr</code>函数用于从字符串<code>s</code>中提取从位置<code>i</code>开始长度为<code>k</code>的子串。</p><h4 id="50-对线性表进行二分查找时，要求线性表必须"><a href="#50-对线性表进行二分查找时，要求线性表必须" class="headerlink" title="50.对线性表进行二分查找时，要求线性表必须"></a>50.对线性表进行二分查找时，要求线性表必须</h4><p><strong>选项:</strong><br>A.以链接方式存储<br>B.以顺序方式存储<br>C.以链接方式存储，且数据方式有序<br>D.以顺序方式存储，且数据元素有序</p><p><strong>答案:</strong>D.以顺序方式存储，且数据元素有序</p><p><strong>解析:</strong>二分查找要求线性表必须是顺序存储的，并且数据元素按有序排列。</p><h4 id="51-最简单的交换排序方法是"><a href="#51-最简单的交换排序方法是" class="headerlink" title="51.最简单的交换排序方法是"></a>51.最简单的交换排序方法是</h4><p><strong>选项:</strong><br>A.选择排序<br>B.快速排序<br>C.冒泡排序<br>D.推排序</p><p><strong>答案:</strong>C.冒泡排序</p><p><strong>解析:</strong>冒泡排序是最简单的交换排序方法，通过反复交换相邻的元素来排序。</p><h4 id="52-length-head-在单链表中的作用是"><a href="#52-length-head-在单链表中的作用是" class="headerlink" title="52.length(head)在单链表中的作用是"></a>52.<code>length(head)</code>在单链表中的作用是</h4><p><strong>选项:</strong><br>A.求表长<br>B.读取表结点<br>C.插入结点<br>D.按值查找</p><p><strong>答案:</strong>A.求表长</p><p><strong>解析:</strong><code>length(head)</code>函数用于计算单链表的长度，即链表中结点的个数。</p><h4 id="53-strcreate-h-n-的作用是"><a href="#53-strcreate-h-n-的作用是" class="headerlink" title="53.strcreate(h,n)的作用是"></a>53.<code>strcreate(h,n)</code>的作用是</h4><p><strong>选项:</strong><br>A.求子串<br>B.串显示<br>C.串替换<br>D.串创建</p><p><strong>答案:</strong>D.串创建</p><p><strong>解析:</strong><code>strcreate(h,n)</code>函数用于创建一个新的字符串。</p><h4 id="54-栈和队列的共同特点是"><a href="#54-栈和队列的共同特点是" class="headerlink" title="54.栈和队列的共同特点是"></a>54.栈和队列的共同特点是</h4><p><strong>选项:</strong><br>A.都是先进后出<br>B.都是先进先出<br>C.没有共同特点<br>D.只允许在端点处插入和删除元素</p><p><strong>答案:</strong>D.只允许在端点处插入和删除元素</p><p><strong>解析:</strong>栈和队列的共同特点是它们都只允许在端点处进行插入和删除操作。</p><h4 id="55-在深度为5的满二叉树中，叶子结点的个数为"><a href="#55-在深度为5的满二叉树中，叶子结点的个数为" class="headerlink" title="55.在深度为5的满二叉树中，叶子结点的个数为"></a>55.在深度为5的满二叉树中，叶子结点的个数为</h4><p><strong>选项:</strong><br>A.31<br>B.32<br>C.15<br>D.16</p><p><strong>答案:</strong>B.32</p><p><strong>解析:</strong>一个满二叉树（也称为完全二叉树）是一种特殊的二叉树，其中每个节点都有两个子节点，除了叶子节点。</p><p>在深度为(d)的满二叉树中，叶子节点的个数可以通过以下公式计算：</p><p>[\text{叶子节点数}=2^d]</p><p>深度为5的满二叉树的叶子节点数为：</p><p>[2^5=32]</p><p>因此，在深度为5的满二叉树中，叶子节点的个数为32。</p><h4 id="56-线性表的顺序存储结构和链式存储结构分别是"><a href="#56-线性表的顺序存储结构和链式存储结构分别是" class="headerlink" title="56.线性表的顺序存储结构和链式存储结构分别是"></a>56.线性表的顺序存储结构和链式存储结构分别是</h4><p><strong>选项:</strong><br>A.随机存储的存储结构，顺序存储的存储结构<br>B.顺序存储的存储结构，顺序存储的存储结构<br>C.任意存储的存储结构，任意存储的存储结构<br>D.随机存储的存储结构，随机存储的存储结构</p><p><strong>答案:</strong>A.随机存储的存储结构，顺序存储的存储结构</p><p><strong>解析:</strong>顺序存储结构的地址在内存中是连续的所以可以通过计算地址实现随机存取,而链式存储结构的存储地址不一定连续,只能通过第个结点的指针顺序存取；</p><h4 id="57-链表不具有的特点是"><a href="#57-链表不具有的特点是" class="headerlink" title="57.链表不具有的特点是"></a>57.链表不具有的特点是</h4><p><strong>选项:</strong><br>A.可随机访问任一元素<br>B.不必事先估计存储空间<br>C.所需空间和线性表长度成正比<br>D.插入删除不需要移动元素</p><p><strong>答案:</strong>A.可随机访问任一元素</p><p><strong>解析:</strong>链表不支持随机访问，只能通过遍历来访问元素。</p><h4 id="58-数组通常采用的存储方式是"><a href="#58-数组通常采用的存储方式是" class="headerlink" title="58.数组通常采用的存储方式是"></a>58.数组通常采用的存储方式是</h4><p><strong>选项:</strong><br>A.顺序存储<br>B.链式存储<br>C.以上说法都不对<br>D.链式或顺序存储</p><p><strong>答案:</strong>A.顺序存储</p><p><strong>解析:</strong>数组通常采用顺序存储方式，即数据在内存中是连续的。</p><h4 id="59-在计算机中，算法是"><a href="#59-在计算机中，算法是" class="headerlink" title="59.在计算机中，算法是"></a>59.在计算机中，算法是</h4><p><strong>选项:</strong><br>A.解题方案的准确而完整的描述<br>B.加工方法<br>C.查询方法<br>D.排序方法</p><p><strong>答案:</strong>A.解题方案的准确而完整的描述</p><p><strong>解析:</strong>算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令。</p><h4 id="60-树是结点的集合，它的根结点数目是"><a href="#60-树是结点的集合，它的根结点数目是" class="headerlink" title="60.树是结点的集合，它的根结点数目是"></a>60.树是结点的集合，它的根结点数目是</h4><p><strong>选项:</strong><br>A.1或多于1<br>B.有且只有1<br>C.至少2<br>D.0或1</p><p><strong>答案:</strong>D.0或1</p><p><strong>解析:</strong>空树没有根节点为0这个概念很淡的，基本都不提及空树。但是就是有这个概念</p><h3 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h3><h4 id="1-下面对队列的叙述正确的是"><a href="#1-下面对队列的叙述正确的是" class="headerlink" title="1.下面对队列的叙述正确的是"></a>1.下面对队列的叙述正确的是</h4><p><strong>选项:</strong><br>A.一种操作受限的栈<br>B.一种操作受限的线性表<br>C.操作任意<br>D.一个先进先出的存储区域</p><p><strong>答案:</strong>B.一种操作受限的线性表,D.一个先进先出的存储区域</p><p><strong>解析:</strong>队列是一种线性表，操作受限，只允许在一端插入（入队）和另一端删除（出队），遵循先进先出（FIFO）原则。</p><h4 id="2-链式存储结构的优点有"><a href="#2-链式存储结构的优点有" class="headerlink" title="2.链式存储结构的优点有"></a>2.链式存储结构的优点有</h4><p><strong>选项:</strong><br>A.删除方便<br>B.插入方便<br>C.方便扩充存储空间<br>D.方便查找</p><p><strong>答案:</strong>A.删除方便,B.插入方便,</p><p><strong>解析:</strong>链式存储结构的主要优点是插入和删除操作方便，不需要移动其他元素。</p><h4 id="3-数据结构的内容包括"><a href="#3-数据结构的内容包括" class="headerlink" title="3.数据结构的内容包括"></a>3.数据结构的内容包括</h4><p><strong>选项:</strong><br>A.数据的存储结构<br>B.数据的处理<br>C.数据的运算<br>D.数据的逻辑结构</p><p><strong>答案:</strong>A.数据的存储结构,C.数据的运算,D.数据的逻辑结构</p><p><strong>解析:</strong>数据结构的内容包括数据的逻辑结构、存储结构以及对数据进行的各种运算。</p><h4 id="4-下列属于线性存储结构的是"><a href="#4-下列属于线性存储结构的是" class="headerlink" title="4.下列属于线性存储结构的是"></a>4.下列属于线性存储结构的是</h4><p><strong>选项:</strong><br>A.树<br>B.串<br>C.图<br>D.数组</p><p><strong>答案:</strong>B.串,D.数组</p><p><strong>解析:</strong>线性存储结构包括数组、链表、栈、队列和串等，树和图属于非线性存储结构。</p><h4 id="5-双向链表的三个域分别是"><a href="#5-双向链表的三个域分别是" class="headerlink" title="5.双向链表的三个域分别是"></a>5.双向链表的三个域分别是</h4><p><strong>选项:</strong><br>A.中间<br>B.前驱<br>C.后继<br>D.数据</p><p><strong>答案:</strong>B.前驱,C.后继,D.数据</p><p><strong>解析:</strong>双向链表的每个节点包含三个域：前驱指针、后继指针和数据域。</p><h4 id="6-线索二叉树的Rtag有几个值"><a href="#6-线索二叉树的Rtag有几个值" class="headerlink" title="6.线索二叉树的Rtag有几个值"></a>6.线索二叉树的Rtag有几个值</h4><p><strong>选项:</strong><br>A.1<br>B.3<br>C.0<br>D.5</p><p><strong>答案:</strong>A.1,C.0</p><p><strong>解析:</strong>线索二叉树的Rtag（右线索标志）有两个值，0表示右孩子指针为空，1表示右孩子指针指向该节点的中序后继。</p><h4 id="7-串常用操作是"><a href="#7-串常用操作是" class="headerlink" title="7.串常用操作是"></a>7.串常用操作是</h4><p><strong>选项:</strong><br>A.<code>strcmp</code><br>B.<code>strassigh(s,t)</code><br>C.<code>strindex</code><br>D.<code>substr</code></p><p><strong>答案:</strong>A.<code>strcmp</code>,B.<code>strassigh(s,t)</code>C.<code>strindex</code>,D.<code>substr</code></p><p><strong>解析:</strong>常用的串操作包括比较（<code>strcmp</code>）、查找子串（<code>strindex</code>）和提取子串（<code>substr</code>）<br>第二个选项我也不知道是什么，估计是打错了的，但是答案就是有它。</p><h4 id="8-对称矩阵应满足的关系是"><a href="#8-对称矩阵应满足的关系是" class="headerlink" title="8.对称矩阵应满足的关系是"></a>8.对称矩阵应满足的关系是</h4><p><strong>选项:</strong><br>A.没有什么关系<br>B.Aij=Aji<br>C.转置后改变<br>D.转置后不变</p><p><strong>答案:</strong>B.Aij=Aji,D.转置后不变</p><p><strong>解析:</strong>对称矩阵的定义是矩阵等于其转置，即Aij=Aji，转置后矩阵不变。</p><h4 id="9-数组的基本操作有"><a href="#9-数组的基本操作有" class="headerlink" title="9.数组的基本操作有"></a>9.数组的基本操作有</h4><p><strong>选项:</strong><br>A.修改相应数据元素<br>B.读取数据元素的值<br>C.插入数据元素<br>D.删除数据元素</p><p><strong>答案:</strong>A.修改相应数据元素,B.读取数据元素的值</p><p><strong>解析:</strong>数组的基本操作包括读取、修改。</p><h4 id="10-下面都是对栈的操作的是"><a href="#10-下面都是对栈的操作的是" class="headerlink" title="10.下面都是对栈的操作的是"></a>10.下面都是对栈的操作的是</h4><p><strong>选项:</strong><br>A.判栈空<br>B.读取栈顶元素<br>C.入栈<br>D.出栈</p><p><strong>答案:</strong>A.判栈空,B.读取栈顶元素,C.入栈,D.出栈</p><p><strong>解析:</strong>栈的基本操作包括判断栈是否为空、读取栈顶元素、入栈和出栈。</p><h4 id="11-下列是树的表示方法的是"><a href="#11-下列是树的表示方法的是" class="headerlink" title="11.下列是树的表示方法的是"></a>11.下列是树的表示方法的是</h4><p><strong>选项:</strong><br>A.文氏图法<br>B.倒悬树法<br>C.图表法<br>D.括号法</p><p><strong>答案:</strong>A.文氏图B.倒悬树法,D.括号法</p><p><strong>解析:</strong>树的常见表示方法包括文氏图，倒悬树法和括号法。图表法不是树的表示方法。</p><h4 id="12-数组的存储空间是不是必须连续"><a href="#12-数组的存储空间是不是必须连续" class="headerlink" title="12.数组的存储空间是不是必须连续"></a>12.数组的存储空间是不是必须连续</h4><p><strong>选项:</strong><br>A.不是<br>B.是<br>C.必须连续<br>D.可以不连续</p><p><strong>答案:</strong>B.是,C.必须连续</p><p><strong>解析:</strong>数组的存储空间在内存中必须是连续的，这样才能通过索引快速访问每个元素。</p><h4 id="13-下面是图的术语的是"><a href="#13-下面是图的术语的是" class="headerlink" title="13.下面是图的术语的是"></a>13.下面是图的术语的是</h4><p><strong>选项:</strong><br>A.终点<br>B.起点<br>C.出度<br>D.入度</p><p><strong>答案:</strong>A.终点，B.起点，C.出度,D.入度</p><p><strong>解析:</strong>在图论中，出度和入度是描述顶点的术语，分别表示从顶点出发的边的数量和到达顶点的边的数量。</p><h4 id="14-下面哪几个是字符串"><a href="#14-下面哪几个是字符串" class="headerlink" title="14.下面哪几个是字符串"></a>14.下面哪几个是字符串</h4><p><strong>选项:</strong><br>A.abcd<br>B.”ABCD”<br>C.1234’<br>D.”1234”</p><p><strong>答案:</strong>B.”ABCD”,D.”1234”</p><p><strong>解析:</strong>字符串通常用引号括起来，表示一系列字符的序列。选项B和D符合这个定义。</p><h4 id="15-一般树和森林的遍历"><a href="#15-一般树和森林的遍历" class="headerlink" title="15.一般树和森林的遍历"></a>15.一般树和森林的遍历</h4><p><strong>选项:</strong><br>A.先根遍历<br>B.中根遍历<br>C.层次遍历<br>D.后根遍历</p><p><strong>答案:</strong>A.先根遍历,C.层次遍历,D.后根遍历</p><p><strong>解析:</strong>一般树和森林的遍历方法包括先根遍历、层次遍历和后根遍历。中根遍历通常用于二叉树。</p><h4 id="16-稀疏矩阵的三元组是哪三元"><a href="#16-稀疏矩阵的三元组是哪三元" class="headerlink" title="16.稀疏矩阵的三元组是哪三元"></a>16.稀疏矩阵的三元组是哪三元</h4><p><strong>选项:</strong><br>A.行<br>B.零<br>C.元素本身<br>D.列</p><p><strong>答案:</strong>A.行,C.元素本身,D.列</p><p><strong>解析:</strong>稀疏矩阵的三元组表示法包括行号、列号和非零元素的值。</p><h4 id="17-关于链式表的描述正确的是"><a href="#17-关于链式表的描述正确的是" class="headerlink" title="17.关于链式表的描述正确的是"></a>17.关于链式表的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间连续<br>B.存储空间可以不连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>B.存储空间可以不连续,C.方便插入</p><p><strong>解析:</strong>链式存储结构的存储空间可以不连续，插入操作方便，但查找操作不如顺序存储结构高效。</p><h4 id="18-串S-“ab43fghq552sah32”的子串有"><a href="#18-串S-“ab43fghq552sah32”的子串有" class="headerlink" title="18.串S=“ab43fghq552sah32”的子串有"></a>18.串S=“ab43fghq552sah32”的子串有</h4><p><strong>选项:</strong><br>A.552sa<br>B.ab43d<br>C.ah32<br>D.fghq553</p><p><strong>答案:</strong>A.552sa,C.ah32</p><p><strong>解析:</strong>子串是原串中连续的一部分，选项A和C是原串的子串，而B和D不是。</p><h4 id="19-三角矩阵有哪几种"><a href="#19-三角矩阵有哪几种" class="headerlink" title="19.三角矩阵有哪几种"></a>19.三角矩阵有哪几种</h4><p><strong>选项:</strong><br>A.下三角<br>B.上三角<br>C.右三角<br>D.左三角</p><p><strong>答案:</strong>A.下三角,B.上三角</p><p><strong>解析:</strong>三角矩阵包括上三角矩阵和下三角矩阵，没有右三角和左三角的概念。</p><h4 id="20-线索二叉树的Ltag有几个值"><a href="#20-线索二叉树的Ltag有几个值" class="headerlink" title="20.线索二叉树的Ltag有几个值"></a>20.线索二叉树的Ltag有几个值</h4><p><strong>选项:</strong><br>A.4<br>B.3<br>C.0<br>D.1</p><p><strong>答案:</strong>C.0,D.1</p><p><strong>解析:</strong>线索二叉树的Ltag有两个值，0表示左孩子指针为空，1表示左孩子指针指向该节点的中序前驱。</p><h4 id="21-下面关于栈的叙说正确的是"><a href="#21-下面关于栈的叙说正确的是" class="headerlink" title="21.下面关于栈的叙说正确的是"></a>21.下面关于栈的叙说正确的是</h4><p><strong>选项:</strong><br>A.先进先出<br>B.后进先出<br>C.后进后出<br>D.先进后出</p><p><strong>答案:</strong>B.后进先出,D.先进后出</p><p><strong>解析:</strong>栈是一种后进先出（LIFO）的数据结构，最后入栈的元素最先出栈，因此后进先出和先进后出是对的。</p><h4 id="22-关于链式串的描述正确的是"><a href="#22-关于链式串的描述正确的是" class="headerlink" title="22.关于链式串的描述正确的是"></a>22.关于链式串的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间部分连续<br>B.存储空间可以不连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>B.存储空间可以不连续,C.方便插入</p><p><strong>解析:</strong>链式存储结构的存储空间可以不连续，并且插入操作方便，但查找操作不如顺序存储结构高效。</p><h4 id="23-关于顺序队列的描述正确的是"><a href="#23-关于顺序队列的描述正确的是" class="headerlink" title="23.关于顺序队列的描述正确的是"></a>23.关于顺序队列的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间连续<br>B.存储空间不连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>A.存储空间连续D.方便查找</p><p><strong>解析:</strong>顺序队列的存储空间是连续的，插入和删除操作在队尾和队首进行。</p><h4 id="24-二叉树有哪几种形态"><a href="#24-二叉树有哪几种形态" class="headerlink" title="24.二叉树有哪几种形态"></a>24.二叉树有哪几种形态</h4><p><strong>选项:</strong><br>A.一个根结点<br>B.空二叉树<br>C.左右子树都有<br>D.只有左子树</p><p><strong>答案:</strong>A.一个根结点,B.空二叉树,C.左右子树都有,D.只有左子树</p><p><strong>解析:</strong>二叉树可以是空二叉树、只有一个根结点、左右子树都有、只有左子树或只有右子树。</p><h4 id="25-常见的矩阵有"><a href="#25-常见的矩阵有" class="headerlink" title="25.常见的矩阵有"></a>25.常见的矩阵有</h4><p><strong>选项:</strong><br>A.三角矩阵<br>B.对称矩阵<br>C.以上都是<br>D.稀疏矩阵</p><p><strong>答案:</strong>C.以上都是全选ABCD</p><p><strong>解析:</strong>常见的矩阵包括三角矩阵、对称矩阵和稀疏矩阵。</p><h4 id="26-对矩阵的基本操作有"><a href="#26-对矩阵的基本操作有" class="headerlink" title="26.对矩阵的基本操作有"></a>26.对矩阵的基本操作有</h4><p><strong>选项:</strong><br>A.矩阵的相加<br>B.矩阵的转置<br>C.矩阵的显示<br>D.矩阵的相乘</p><p><strong>答案:</strong>A.矩阵的相加,B.矩阵的转置,C.矩阵的显示,D.矩阵的相乘</p><p><strong>解析:</strong>矩阵的基本操作包括矩阵的相加、转置、显示和相乘。</p><h4 id="27-动态查找树表有"><a href="#27-动态查找树表有" class="headerlink" title="27.动态查找树表有"></a>27.动态查找树表有</h4><p><strong>选项:</strong><br>A.平衡二叉树<br>B.二叉排序树<br>C.森林<br>D.一般树</p><p><strong>答案:</strong>B.二叉排序树D.一般树</p><p><strong>解析:</strong>动态查找树表包括平衡二叉树和二叉排序树，答案选的BD但是我感觉是AB按照答案来吧</p><h4 id="28-哈希表常有操作有"><a href="#28-哈希表常有操作有" class="headerlink" title="28.哈希表常有操作有"></a>28.哈希表常有操作有</h4><p><strong>选项:</strong><br>A.查找<br>B.插入<br>C.排序<br>D.删除</p><p><strong>答案:</strong>A.查找,B.插入,D.删除</p><p><strong>解析:</strong>哈希表的常见操作包括查找、插入和删除，排序不是哈希表的常见操作。</p><h4 id="29-图的遍历有"><a href="#29-图的遍历有" class="headerlink" title="29.图的遍历有"></a>29.图的遍历有</h4><p><strong>选项:</strong><br>A.深度优先搜索<br>B.宽度优先搜索<br>C.高度优先搜索<br>D.广度优先搜索</p><p><strong>答案:</strong>A.深度优先搜索,D.广度优先搜索</p><p><strong>解析:</strong>图的遍历方法包括深度优先搜索（DFS）和广度优先搜索（BFS），没有宽度优先搜索和高度优先搜索的概念。</p><h4 id="30-下面是串操作的函数"><a href="#30-下面是串操作的函数" class="headerlink" title="30.下面是串操作的函数"></a>30.下面是串操作的函数</h4><p><strong>选项:</strong><br>A.<code>strcmp</code><br>B.<code>strcopy</code><br>C.<code>strinsert</code><br>D.<code>strabc</code></p><p><strong>答案:</strong>A.<code>strcmp</code>,B.<code>strcopy</code>,C.<code>strinsert</code></p><p><strong>解析:</strong>常见的串操作函数包括比较字符串的<code>strcmp</code>，复制字符串的<code>strcopy</code>，插入子串的<code>strinsert</code>。<code>strabc</code>不是一个有效的字符串操作函数。</p><h4 id="31-下列排序的时间复杂度为O-n-2-的是"><a href="#31-下列排序的时间复杂度为O-n-2-的是" class="headerlink" title="31.下列排序的时间复杂度为O(n^2)的是"></a>31.下列排序的时间复杂度为<script type="math/tex">O(n^2)</script>的是</h4><p><strong>选项:</strong><br>A.折半插入排序<br>B.直接插入排序<br>C.堆排序<br>D.希尔排序</p><p><strong>答案:</strong>A.折半插入B.直接插入排序</p><p><strong>解析:</strong>直接插入排序的时间复杂度在最坏情况下为<script type="math/tex">O(n^2)</script>。折半插入排序和希尔排序在某些情况下也可能达到<script type="math/tex">O(n^2)</script>，但它们的平均时间复杂度通常更低。堆排序的时间复杂度为<script type="math/tex">O(n\logn)</script><br>太烦了，它没办法识别latex格式，给我多两个dollar.</p><h4 id="32-下列属于交换排序的是"><a href="#32-下列属于交换排序的是" class="headerlink" title="32.下列属于交换排序的是"></a>32.下列属于交换排序的是</h4><p><strong>选项:</strong><br>A.快速排序<br>B.冒泡排序<br>C.堆排序<br>D.直接选择排序</p><p><strong>答案:</strong>A.快速排序,B.冒泡排序</p><p><strong>解析:</strong>交换排序包括快速排序和冒泡排序，它们通过交换元素来排序。堆排序和直接选择排序不属于交换排序.</p><h4 id="33-串有哪些存储结构"><a href="#33-串有哪些存储结构" class="headerlink" title="33.串有哪些存储结构"></a>33.串有哪些存储结构</h4><p><strong>选项:</strong><br>A.线形<br>B.集合<br>C.链式存储结构<br>D.顺序存取</p><p><strong>答案:</strong>A.线形C.链式存储结构</p><p><strong>解析:</strong>实际应该是顺序存储和链式存储但是答案给的是AC</p><h4 id="34-下面是图的术语的是"><a href="#34-下面是图的术语的是" class="headerlink" title="34.下面是图的术语的是"></a>34.下面是图的术语的是</h4><p><strong>选项:</strong><br>A.回路<br>B.路径<br>C.线路<br>D.环</p><p><strong>答案:</strong>A.回路,B.路径,D.环</p><p><strong>解析:</strong>图的术语包括回路、路径和环。线路不是图的术语.</p><h4 id="35-遍历二叉树有哪几种方法"><a href="#35-遍历二叉树有哪几种方法" class="headerlink" title="35.遍历二叉树有哪几种方法"></a>35.遍历二叉树有哪几种方法</h4><p><strong>选项:</strong><br>A.中根遍历<br>B.先根遍历<br>C.后根遍历<br>D.无根遍历</p><p><strong>答案:</strong>A.中根遍历,B.先根遍历,C.后根遍历</p><p><strong>解析:</strong>遍历二叉树的方法包括中根遍历、先根遍历和后根遍历。无根遍历不是一种遍历方法.</p><h4 id="36-下列不属于插入排序的是"><a href="#36-下列不属于插入排序的是" class="headerlink" title="36.下列不属于插入排序的是"></a>36.下列不属于插入排序的是</h4><p><strong>选项:</strong><br>A.快速排序<br>B.冒泡排序<br>C.归并排序<br>D.堆排序</p><p><strong>答案:</strong>A.快速排序,B.冒泡排序,C.归并排序,D.堆排序</p><p><strong>解析:</strong>快速排序、冒泡排序、归并排序和堆排序都不属于插入排序。插入排序包括直接插入排序和折半插入排序.</p><h4 id="37-下列属于插入排序的是"><a href="#37-下列属于插入排序的是" class="headerlink" title="37.下列属于插入排序的是"></a>37.下列属于插入排序的是</h4><p><strong>选项:</strong><br>A.折半插入排序<br>B.直接插入排序<br>C.归并排序<br>D.希尔排序</p><p><strong>答案:</strong>A.折半插入排序,B.直接插入排序,D.希尔排序</p><p><strong>解析:</strong>插入排序包括直接插入排序和折半插入排序。希尔排序是插入排序的改进版。归并排序不属于插入排序.</p><h4 id="38-一般树的存储结构有"><a href="#38-一般树的存储结构有" class="headerlink" title="38.一般树的存储结构有"></a>38.一般树的存储结构有</h4><p><strong>选项:</strong><br>A.顺序存储结构<br>B.单存储结构<br>C.多种存储结构<br>D.链式存储结构</p><p><strong>答案:</strong>A.顺序存储结构D.链式存储结构</p><p><strong>解析:</strong>一般树的存储结构包括顺序存储结构和链式存储结构。单存储结构不是一种常见的树存储结构。</p><h4 id="39-数据元素又被称为"><a href="#39-数据元素又被称为" class="headerlink" title="39.数据元素又被称为"></a>39.数据元素又被称为</h4><p><strong>选项:</strong><br>A.结点<br>B.元素<br>C.记录<br>D.顶点</p><p><strong>答案:</strong>A.结点,B.元素,C.记录D.顶点</p><p><strong>解析:</strong>数据元素可以被称为结点、元素或记录。顶点通常用于图论中.</p><h4 id="40-哈希函数有哪些构造方法"><a href="#40-哈希函数有哪些构造方法" class="headerlink" title="40.哈希函数有哪些构造方法"></a>40.哈希函数有哪些构造方法</h4><p><strong>选项:</strong><br>A.平方取中法<br>B.数字分析法<br>C.折叠法<br>D.除余法</p><p><strong>答案:</strong>A.平方取中法,B.数字分析法,C.折叠法,D.除余法</p><p><strong>解析:</strong>哈希函数的常见构造方法包括平方取中法、数字分析法、折叠法和除余法.</p><h4 id="41-数组的下标是不是必须从0开始"><a href="#41-数组的下标是不是必须从0开始" class="headerlink" title="41.数组的下标是不是必须从0开始"></a>41.数组的下标是不是必须从0开始</h4><p><strong>选项:</strong><br>A.不是<br>B.是<br>C.可以不是<br>D.可以是</p><p><strong>答案:</strong>A.不是,C.可以不是,D.可以是</p><p><strong>解析:</strong>虽然大多数编程语言（如C、C++、Java等）数组的下标从0开始，但并不是所有语言都如此。例如，Lua语言的数组下标从1开始。因此，数组的下标不一定必须从0开始，可以不是，也可以是。</p><h4 id="42-插入排序可分为"><a href="#42-插入排序可分为" class="headerlink" title="42.插入排序可分为"></a>42.插入排序可分为</h4><p><strong>选项:</strong><br>A.直接插入排序<br>B.交换插入排序<br>C.折半插入排序<br>D.希尔排序</p><p><strong>答案:</strong>A.直接插入排序,C.折半插入排序,D.希尔排序</p><p><strong>解析:</strong>插入排序包括直接插入排序和折半插入排序。希尔排序是插入排序的改进版。交换插入排序不是一种常见的插入排序方法。</p><h4 id="43-衡量算法效率有"><a href="#43-衡量算法效率有" class="headerlink" title="43.衡量算法效率有"></a>43.衡量算法效率有</h4><p><strong>选项:</strong><br>A.时间复杂度<br>B.时间空间复杂度<br>C.交叉复杂度<br>D.空间复杂度</p><p><strong>答案:</strong>A.时间复杂度,D.空间复杂度</p><p><strong>解析:</strong>衡量算法效率的主要指标是时间复杂度和空间复杂度，分别表示算法在运行时所需的时间和内存。</p><h4 id="44-静态查找表有哪几种"><a href="#44-静态查找表有哪几种" class="headerlink" title="44.静态查找表有哪几种"></a>44.静态查找表有哪几种</h4><p><strong>选项:</strong><br>A.顺序查找<br>B.哈希表<br>C.分块查找<br>D.二分查找</p><p><strong>答案:</strong>A.顺序查找,C.分块查找,D.二分查找</p><p><strong>解析:</strong>静态查找表的查找方法包括顺序查找、分块查找和二分查找。哈希表通常用于动态查找。</p><h4 id="45-下面不是树的基本术语的是"><a href="#45-下面不是树的基本术语的是" class="headerlink" title="45.下面不是树的基本术语的是"></a>45.下面不是树的基本术语的是</h4><p><strong>选项:</strong><br>A.哥哥<br>B.兄弟<br>C.儿子<br>D.姐姐</p><p><strong>答案:</strong>A.哥哥,D.姐姐</p><p><strong>解析:</strong>树的基本术语包括根节点、父节点、子节点、兄弟节点等。哥哥和姐姐不是树的术语。</p><h4 id="46-下列排序的时间复杂度不是O-n-2-的是"><a href="#46-下列排序的时间复杂度不是O-n-2-的是" class="headerlink" title="46.下列排序的时间复杂度不是O(n^2)的是"></a>46.下列排序的时间复杂度不是<script type="math/tex">O(n^2)</script>的是</h4><p><strong>选项:</strong><br>A.折半插入排序<br>B.希尔排序<br>C.直接插入排序<br>D.堆排序</p><p><strong>答案:</strong>B.希尔排序,D.堆排序</p><p><strong>解析:</strong>希尔排序和堆排序的时间复杂度不是<script type="math/tex">O(n^2)</script>。希尔排序的时间复杂度依赖于增量序列，通常为<script type="math/tex">O(n^{3/2})</script>或更低。堆排序的时间复杂度为<script type="math/tex">O(n\logn)</script>。</p><h4 id="47-一颗满二叉树同时又是一颗（）"><a href="#47-一颗满二叉树同时又是一颗（）" class="headerlink" title="47.一颗满二叉树同时又是一颗（）"></a>47.一颗满二叉树同时又是一颗（）</h4><p><strong>选项:</strong><br>A.二叉排序树<br>B.完全二叉树<br>C.平衡二叉树<br>D.正则二叉树</p><p><strong>答案:</strong>B.完全二叉树CD</p><p><strong>解析:</strong>满二叉树是一种特殊的完全二叉树，其中每个节点都有两个或零个子节点。</p><h4 id="48-二叉树有哪几种存储结构"><a href="#48-二叉树有哪几种存储结构" class="headerlink" title="48.二叉树有哪几种存储结构"></a>48.二叉树有哪几种存储结构</h4><p><strong>选项:</strong><br>A.树性结构<br>B.图形结构<br>C.链式结构<br>D.顺序结构</p><p><strong>答案:</strong>C.链式结构,D.顺序结构</p><p><strong>解析:</strong>二叉树的存储结构包括链式结构和顺序结构。</p><h4 id="49-线性表有哪几种存储结构"><a href="#49-线性表有哪几种存储结构" class="headerlink" title="49.线性表有哪几种存储结构"></a>49.线性表有哪几种存储结构</h4><p><strong>选项:</strong><br>A.顺序存储结构<br>B.环状结构<br>C.链式存储结构<br>D.树性结构</p><p><strong>答案:</strong>A.顺序存储结构,C.链式存储结构</p><p><strong>解析:</strong>线性表的存储结构包括顺序存储结构和链式存储结构。环状结构和树性结构不是线性表的存储结构。</p><h4 id="50-下面不是算法特性的是"><a href="#50-下面不是算法特性的是" class="headerlink" title="50.下面不是算法特性的是"></a>50.下面不是算法特性的是</h4><p><strong>选项:</strong><br>A.无序性<br>B.有穷性<br>C.交互性<br>D.可行性</p><p><strong>答案:</strong>A.无序性,C.交互性</p><p><strong>解析:</strong>算法的基本特性包括有穷性、确定性、可行性和输入输出。无序性和交互性不是算法的特性。</p><h4 id="51-关键字和R-i-有哪几种情况"><a href="#51-关键字和R-i-有哪几种情况" class="headerlink" title="51.关键字和R[i]有哪几种情况"></a>51.关键字和R[i]有哪几种情况</h4><p><strong>选项:</strong><br>A.相等<br>B.没关系<br>C.大于<br>D.小于</p><p><strong>答案:</strong>A.相等,C.大于,D.小于</p><p><strong>解析:</strong>在比较关键字和R[i]时，可能的情况包括相等、大于和小于。没有“没关系”这种情况。</p><h4 id="52-下列说法正确的是"><a href="#52-下列说法正确的是" class="headerlink" title="52.下列说法正确的是"></a>52.下列说法正确的是</h4><p><strong>选项:</strong><br>A.树形结构是线形结构的特例<br>B.线性结构是树性结构的特例<br>C.树形结构是图状结构的特例<br>D.图状结构是树形结构的特例</p><p><strong>答案:</strong>B线性结构是特例C.树形结构是图状结构的特例</p><p><strong>解析:</strong>树形结构是一种特殊的图状结构，因为树是一种无环的连通图。</p><h4 id="53-下列说法错误的是（）"><a href="#53-下列说法错误的是（）" class="headerlink" title="53.下列说法错误的是（）"></a>53.下列说法错误的是（）</h4><p><strong>选项:</strong><br>A.数据项又称为字段<br>B.数据项是数据的基本单位<br>C.数据项还可以再分<br>D.数据项又称为域</p><p><strong>答案:</strong>B数据项是数据的基本单位C.数据项还可以再分</p><p><strong>解析:</strong>数据项是数据的最小单位，不能再分。数据项又称为字段或域。数据的基本单位是字节</p><h4 id="54-程序"><a href="#54-程序" class="headerlink" title="54.程序="></a>54.程序=</h4><p><strong>选项:</strong><br>A.数据结构<br>B.算法<br>C.存储结构<br>D.公式</p><p><strong>答案:</strong>A数据结构B.算法</p><p><strong>解析:</strong>程序是算法的具体实现，用来解决特定问题。</p><h4 id="55-下列属于线性存储结构的是"><a href="#55-下列属于线性存储结构的是" class="headerlink" title="55.下列属于线性存储结构的是"></a>55.下列属于线性存储结构的是</h4><p><strong>选项:</strong><br>A.队列<br>B.栈<br>C.树<br>D.图</p><p><strong>答案:</strong>A.队列,B.栈</p><p><strong>解析:</strong>队列和栈是线性存储结构，而树和图是非线性存储结构。</p><h4 id="56-下列说法正确的是（）"><a href="#56-下列说法正确的是（）" class="headerlink" title="56.下列说法正确的是（）"></a>56.下列说法正确的是（）</h4><p><strong>选项:</strong><br>A.图状结构中结点不存在纵向的联系<br>B.图状结构中结点存在纵向的联系<br>C.图状结构中结点不存在横向的联系<br>D.图状结构中结点存在横向的联系</p><p><strong>答案:</strong>B.图状结构中结点存在纵向的联系,D.图状结构中结点存在横向的联系</p><p><strong>解析:</strong>在图状结构中，结点之间可以有纵向和横向的联系。</p><h4 id="57-结点之间的关联方式有"><a href="#57-结点之间的关联方式有" class="headerlink" title="57.结点之间的关联方式有"></a>57.结点之间的关联方式有</h4><p><strong>选项:</strong><br>A.链式存储<br>B.顺序存储<br>C.散列存储<br>D.索引存储</p><p><strong>答案:</strong>A.链式存储,B.顺序存储,C.散列存储,D.索引存储</p><p><strong>解析:</strong>结点之间的关联方式包括链式存储、顺序存储、散列存储和索引存储。</p><h4 id="58-有哪几种基本存储方式"><a href="#58-有哪几种基本存储方式" class="headerlink" title="58.有哪几种基本存储方式"></a>58.有哪几种基本存储方式</h4><p><strong>选项:</strong><br>A.链式存储方式<br>B.顺序存储方式<br>C.散列存储方式<br>D.索引存储方式</p><p><strong>答案:</strong>A.链式存储方式,B.顺序存储方式,C.散列存储方式,D.索引存储方式</p><p><strong>解析:</strong>基本存储方式包括链式存储方式、顺序存储方式、散列存储方式和索引存储方式。</p><h4 id="59-下列不属于线性存储结构的是"><a href="#59-下列不属于线性存储结构的是" class="headerlink" title="59.下列不属于线性存储结构的是"></a>59.下列不属于线性存储结构的是</h4><p><strong>选项:</strong><br>A.树<br>B.串<br>C.图<br>D.数组</p><p><strong>答案:</strong>A.树,C.图</p><p><strong>解析:</strong>树和图是非线性存储结构，而串和数组是线性存储结构。</p><h4 id="60-栈有哪几种存储结构"><a href="#60-栈有哪几种存储结构" class="headerlink" title="60.栈有哪几种存储结构"></a>60.栈有哪几种存储结构</h4><p><strong>选项:</strong><br>A.链式存储<br>B.顺序存储<br>C.网状结构<br>D.树性结构</p><p><strong>答案:</strong>A.链式存储,B.顺序存储</p><p><strong>解析:</strong>栈的存储结构包括链式存储和顺序存储，网状结构和树性结构不是栈的存储结构。</p><h4 id="61-多维数组的存储"><a href="#61-多维数组的存储" class="headerlink" title="61.多维数组的存储"></a>61.多维数组的存储</h4><p><strong>选项:</strong><br>A.按维数链式存储<br>B.按维数顺序存储<br>C.可以按列链式存储<br>D.可以按列顺序存储</p><p><strong>答案:</strong>B.按维数顺序存储,D.可以按列顺序存储</p><p><strong>解析:</strong>多维数组的存储通常是按顺序存储的，可以按行顺序存储，也可以按列顺序存储。链式存储不常用于多维数组。</p><h4 id="62-数据的逻辑结构可分为哪几种结构"><a href="#62-数据的逻辑结构可分为哪几种结构" class="headerlink" title="62.数据的逻辑结构可分为哪几种结构"></a>62.数据的逻辑结构可分为哪几种结构</h4><p><strong>选项:</strong><br>A.集合<br>B.图状结构<br>C.树形结构<br>D.线性结构</p><p><strong>答案:</strong>A.集合,B.图状结构,C.树形结构,D.线性结构</p><p><strong>解析:</strong>数据的逻辑结构包括集合结构、图状结构、树形结构和线性结构。</p><h4 id="63-下面说法是二叉树的特点的是"><a href="#63-下面说法是二叉树的特点的是" class="headerlink" title="63.下面说法是二叉树的特点的是"></a>63.下面说法是二叉树的特点的是</h4><p><strong>选项:</strong><br>A.二叉树的每个结点的度≤2<br>B.二叉树可以为空<br>C.二叉树是无序的<br>D.二叉树是有序的</p><p><strong>答案:</strong>A.二叉树的每个结点的度≤2,B.二叉树可以为空,D.二叉树是有序的</p><p><strong>解析:</strong>二叉树的每个结点的度最多为2，二叉树可以为空，二叉树是有序的。</p><h4 id="64-S-“IAMASTUDENT”，T-“GOOD”，执行StrLength-s-SubString-s-8-7-的结果是"><a href="#64-S-“IAMASTUDENT”，T-“GOOD”，执行StrLength-s-SubString-s-8-7-的结果是" class="headerlink" title="64.S=“IAMASTUDENT”，T=“GOOD”，执行StrLength(s),SubString(s,8,7)的结果是"></a>64.S=“IAMASTUDENT”，T=“GOOD”，执行<code>StrLength(s),SubString(s,8,7)</code>的结果是</h4><p><strong>选项:</strong><br>A.14<br>B.12<br>C.STUDENT<br>D.GOOD</p><p><strong>答案:</strong>A.14,C.STUDENT</p><p><strong>解析:</strong><code>StrLength(s)</code>返回字符串S的长度，为14。<code>SubString(s,8,7)</code>返回从第8个字符开始的7个字符，即”STUDENT”。</p><h4 id="65-进栈的顺序是123，那么可能出栈的顺序是"><a href="#65-进栈的顺序是123，那么可能出栈的顺序是" class="headerlink" title="65.进栈的顺序是123，那么可能出栈的顺序是"></a>65.进栈的顺序是123，那么可能出栈的顺序是</h4><p><strong>选项:</strong><br>A.132<br>B.123<br>C.231<br>D.213</p><p><strong>答案:</strong>A.132,B.123,C.231,D.213</p><p><strong>解析:</strong>栈的操作遵循后进先出（LIFO）原则，所有这些顺序都是可能的。</p><h4 id="66-关于顺序表的描述正确的是"><a href="#66-关于顺序表的描述正确的是" class="headerlink" title="66.关于顺序表的描述正确的是"></a>66.关于顺序表的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间连续<br>B.存储空间不连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>A.存储空间连续,D.方便查找</p><p><strong>解析:</strong>顺序表的存储空间是连续的，方便查找，但插入操作不如链表方便。</p><h4 id="67-递归必须满足的条件是"><a href="#67-递归必须满足的条件是" class="headerlink" title="67.递归必须满足的条件是"></a>67.递归必须满足的条件是</h4><p><strong>选项:</strong><br>A.递归公式<br>B.初始条件<br>C.任何条件<br>D.结束条件</p><p><strong>答案:</strong>A.递归公式,D.结束条件</p><p><strong>解析:</strong>递归必须有递归公式和结束条件，以确保递归能够正确地进行和终止。</p><h4 id="68-下列不属于交换排序的是（-）"><a href="#68-下列不属于交换排序的是（-）" class="headerlink" title="68.下列不属于交换排序的是（　　）"></a>68.下列不属于交换排序的是（　　）</h4><p><strong>选项:</strong><br>A.直接插入排序<br>B.冒泡排序<br>C.归并排序<br>D.希尔排序</p><p><strong>答案:</strong>A.直接插入排序,C.归并排序,D.希尔排序</p><p><strong>解析:</strong>交换排序包括冒泡排序和快速排序，直接插入排序、归并排序和希尔排序不属于交换排序。</p><h4 id="69-连通图有分为"><a href="#69-连通图有分为" class="headerlink" title="69.连通图有分为"></a>69.连通图有分为</h4><p><strong>选项:</strong><br>A.强连通图<br>B.超强连通图<br>C.弱连通图<br>D.强连通分图</p><p><strong>答案:</strong>A.强连通图,D.强连通分图</p><p><strong>解析:</strong>连通图可以分为强连通图和弱连通图，强连通分图是强连通图的一部分。</p><h4 id="70-算法的效率主要是指"><a href="#70-算法的效率主要是指" class="headerlink" title="70.算法的效率主要是指"></a>70.算法的效率主要是指</h4><p><strong>选项:</strong><br>A.算法的时间效率<br>B.算法的有效性<br>C.算法的空间效率<br>D.算法的可行性</p><p><strong>答案:</strong>A.算法的时间效率,C.算法的空间效率</p><p><strong>解析:</strong>算法的效率主要包括时间效率和空间效率，分别表示算法运行所需的时间和内存。</p><h4 id="71-构造后续哈希地址常见的三种探测法"><a href="#71-构造后续哈希地址常见的三种探测法" class="headerlink" title="71.构造后续哈希地址常见的三种探测法"></a>71.构造后续哈希地址常见的三种探测法</h4><p><strong>选项:</strong><br>A.线形探测法<br>B.三次探测法<br>C.随机探测法<br>D.二次探测法</p><p><strong>答案:</strong>A.线形探测法,C.随机探测法,D.二次探测法</p><p><strong>解析:</strong>常见的哈希地址探测法包括线形探测法、随机探测法和二次探测法。三次探测法不是常见的探测法。</p><h4 id="72-三叉链表的结点结构是"><a href="#72-三叉链表的结点结构是" class="headerlink" title="72.三叉链表的结点结构是"></a>72.三叉链表的结点结构是</h4><p><strong>选项:</strong><br>A.DATA<br>B.LCH<br>C.RCH<br>D.PARENT</p><p><strong>答案:</strong>A.DATA,B.LCH,C.RCH,D.PARENT</p><p><strong>解析:</strong>三叉链表的结点结构包括数据域（DATA）、左孩子指针（LCH）、右孩子指针（RCH）和父节点指针（PARENT）。</p><h4 id="73-数据的逻辑结构可分为"><a href="#73-数据的逻辑结构可分为" class="headerlink" title="73.数据的逻辑结构可分为"></a>73.数据的逻辑结构可分为</h4><p><strong>选项:</strong><br>A.线性结构<br>B.物理结构<br>C.存储结构<br>D.非线性结构</p><p><strong>答案:</strong>A.线性结构,D.非线性结构</p><p><strong>解析:</strong>数据的逻辑结构可分为线性结构和非线性结构。物理结构和存储结构是数据的物理存储方式，不属于逻辑结构。</p><h4 id="74-图的存储结构有"><a href="#74-图的存储结构有" class="headerlink" title="74.图的存储结构有"></a>74.图的存储结构有</h4><p><strong>选项:</strong><br>A.链式<br>B.顺序<br>C.邻接链表<br>D.邻接矩阵</p><p><strong>答案:</strong>C.邻接链表,D.邻接矩阵</p><p><strong>解析:</strong>图的存储结构包括邻接链表和邻接矩阵。</p><h4 id="75-矩阵的常见操作有"><a href="#75-矩阵的常见操作有" class="headerlink" title="75.矩阵的常见操作有"></a>75.矩阵的常见操作有</h4><p><strong>选项:</strong><br>A.矩阵相加<br>B.矩阵转置<br>C.矩阵显示<br>D.矩阵相乘</p><p><strong>答案:</strong>A.矩阵相加,B.矩阵转置,C.矩阵显示,D.矩阵相乘</p><p><strong>解析:</strong>矩阵的常见操作包括矩阵相加、矩阵转置、矩阵显示和矩阵相乘。</p><h4 id="76-算法的描述方法有"><a href="#76-算法的描述方法有" class="headerlink" title="76.算法的描述方法有"></a>76.算法的描述方法有</h4><p><strong>选项:</strong><br>A.图形方式<br>B.语言方式<br>C.表格方式<br>D.数学方式</p><p><strong>答案:</strong>A.图形方式,B.语言方式,C.表格方式</p><p><strong>解析:</strong>算法的描述方法包括图形方式（如流程图）、语言方式（如伪代码）和表格方式。数学方式通常用于描述算法的复杂度，而不是算法本身。</p><h4 id="77-下列说法正确的是（）"><a href="#77-下列说法正确的是（）" class="headerlink" title="77.下列说法正确的是（）"></a>77.下列说法正确的是（）</h4><p><strong>选项:</strong><br>A.数据元素是数据的基本单位<br>B.数据项是数据的基本单位<br>C.数据项又称为字段或域<br>D.数据项不可再分</p><p><strong>答案:</strong>A.数据元素是数据的基本单位,C.数据项又称为字段或域,D.数据项不可再分</p><p><strong>解析:</strong>数据元素是数据的基本单位，数据项又称为字段或域，数据项不可再分。数据项不是数据的基本单位。</p><h4 id="78-关于一棵树，说法错误的是"><a href="#78-关于一棵树，说法错误的是" class="headerlink" title="78.关于一棵树，说法错误的是"></a>78.关于一棵树，说法错误的是</h4><p><strong>选项:</strong><br>A.只能有一个根结点<br>B.可以有多个根结点<br>C.只有唯一叶结点<br>D.可以有多个叶结点</p><p><strong>答案:</strong>B.可以有多个根结点,C.只有唯一叶结点</p><p><strong>解析:</strong>一棵树只能有一个根结点，可以有多个叶结点。</p><h4 id="79-树分为"><a href="#79-树分为" class="headerlink" title="79.树分为"></a>79.树分为</h4><p><strong>选项:</strong><br>A.无序树<br>B.有序树<br>C.树林<br>D.森林</p><p><strong>答案:</strong>A.无序树,B.有序树,D.森林</p><p><strong>解析:</strong>树的分类包括无序树、有序树和森林。树林不是树的分类。</p><h4 id="80-下列不属于线性存储结构的是"><a href="#80-下列不属于线性存储结构的是" class="headerlink" title="80.下列不属于线性存储结构的是"></a>80.下列不属于线性存储结构的是</h4><p><strong>选项:</strong><br>A.队列<br>B.栈<br>C.树<br>D.图</p><p><strong>答案:</strong>C.树,D.图</p><p><strong>解析:</strong>树和图是非线性存储结构，而队列和栈是线性存储结构。</p><h4 id="81-处理哈希表地址冲突的方法有"><a href="#81-处理哈希表地址冲突的方法有" class="headerlink" title="81.处理哈希表地址冲突的方法有"></a>81.处理哈希表地址冲突的方法有</h4><p><strong>选项:</strong><br>A.链地址法<br>B.开放地址法<br>C.地址排序法<br>D.没有方法</p><p><strong>答案:</strong>A.链地址法,B.开放地址法</p><p><strong>解析:</strong>处理哈希表地址冲突的常见方法包括链地址法和开放地址法。地址排序法和没有方法不属于解决冲突的方法。</p><h4 id="82-对二维数组描述正确的是"><a href="#82-对二维数组描述正确的是" class="headerlink" title="82.对二维数组描述正确的是"></a>82.对二维数组描述正确的是</h4><p><strong>选项:</strong><br>A.又称多维数组<br>B.又称一维数组<br>C.行列必须相同<br>D.行列可以相同</p><p><strong>答案:</strong>A.又称多维数组,D.行列可以相同</p><p><strong>解析:</strong>二维数组是多维数组的一种，行列可以相同但不一定必须相同。</p><h4 id="83-一般树转换成二叉树的步骤"><a href="#83-一般树转换成二叉树的步骤" class="headerlink" title="83.一般树转换成二叉树的步骤"></a>83.一般树转换成二叉树的步骤</h4><p><strong>选项:</strong><br>A.对每个结点保留最左边孩子的连线，删除别的线<br>B.相临兄弟之间连线<br>C.将兄弟之间线水平顺时针旋转45度<br>D.对每个结点保留最右边孩子连线,删除别的线</p><p><strong>答案:</strong>A.对每个结点保留最左边孩子的连线，删除别的线,B.相临兄弟之间连线</p><p><strong>解析:</strong>一般树转换成二叉树的步骤包括对每个结点保留最左边孩子的连线，删除别的线，并将相邻兄弟之间连线。</p><h4 id="84-队列的存储结构有哪些"><a href="#84-队列的存储结构有哪些" class="headerlink" title="84.队列的存储结构有哪些"></a>84.队列的存储结构有哪些</h4><p><strong>选项:</strong><br>A.线性结构<br>B.集合<br>C.链式存储结构<br>D.网性结构</p><p><strong>答案:</strong>A.线性结构,C.链式存储结构</p><p><strong>解析:</strong>队列的存储结构包括线性结构和链式存储结构。</p><h4 id="85-图分为"><a href="#85-图分为" class="headerlink" title="85.图分为"></a>85.图分为</h4><p><strong>选项:</strong><br>A.有向图<br>B.完全图<br>C.部分图<br>D.无向图</p><p><strong>答案:</strong>A.有向图,D.无向图</p><p><strong>解析:</strong>图可以分为有向图和无向图。</p><h4 id="86-二叉链表的结点中的信息有"><a href="#86-二叉链表的结点中的信息有" class="headerlink" title="86.二叉链表的结点中的信息有"></a>86.二叉链表的结点中的信息有</h4><p><strong>选项:</strong><br>A.RCH<br>B.LCH<br>C.DATA<br>D.HEAD</p><p><strong>答案:</strong>A.RCH,B.LCH,C.DATA</p><p><strong>解析:</strong>二叉链表的结点包含右孩子指针（RCH）、左孩子指针（LCH）和数据域（DATA）。</p><h4 id="87-顺序循环队列是"><a href="#87-顺序循环队列是" class="headerlink" title="87.顺序循环队列是"></a>87.顺序循环队列是</h4><p><strong>选项:</strong><br>A.存储区域连续的队列<br>B.特殊的队列<br>C.头尾相连<br>D.不是队列</p><p><strong>答案:</strong>A.存储区域连续的队列,B.特殊的队列,C.头尾相连</p><p><strong>解析:</strong>顺序循环队列是一种存储区域连续的特殊队列，头尾相连。</p><h4 id="88-顺序查找的算法分析"><a href="#88-顺序查找的算法分析" class="headerlink" title="88.顺序查找的算法分析"></a>88.顺序查找的算法分析</h4><p><strong>选项:</strong><br>A.最好情况下比较一次<br>B.最坏情况下比较N次<br>C.不用比较<br>D.平均比较n/2次</p><p><strong>答案:</strong>A.最好情况下比较一次,B.最坏情况下比较N次,D.平均比较n/2次</p><p><strong>解析:</strong>顺序查找的最好情况是第一次比较就找到目标元素，最坏情况是比较N次，平均情况下比较n/2次。</p><h4 id="89-关于顺序串的描述正确的是"><a href="#89-关于顺序串的描述正确的是" class="headerlink" title="89.关于顺序串的描述正确的是"></a>89.关于顺序串的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间部分连续<br>B.存储空间连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>B.存储空间连续,D.方便查找</p><p><strong>解析:</strong>顺序串的存储空间是连续的，方便查找，但插入操作不如链式存储方便。</p><h4 id="90-一个存储结构包括"><a href="#90-一个存储结构包括" class="headerlink" title="90.一个存储结构包括"></a>90.一个存储结构包括</h4><p><strong>选项:</strong><br>A.存储结点<br>B.存储位置<br>C.以上说法都不对<br>D.数据元素间的关联方式</p><p><strong>答案:</strong>A.存储结点,D.数据元素间的关联方式</p><p><strong>解析:</strong>存储结构包括存储结点和数据元素间的关联方式。</p><h4 id="91-下列不属于选择排序的是（-）"><a href="#91-下列不属于选择排序的是（-）" class="headerlink" title="91.下列不属于选择排序的是（　　　）"></a>91.下列不属于选择排序的是（　　　）</h4><p><strong>选项:</strong><br>A.希尔排序<br>B.直接插入排序<br>C.冒泡排序<br>D.堆排序</p><p><strong>答案:</strong>A.希尔排序,B.直接插入排序,C.冒泡排序</p><p><strong>解析:</strong>希尔排序、直接插入排序和冒泡排序不属于选择排序，堆排序属于选择排序。</p><h4 id="92-下列关于稀疏矩阵的说法正确的是"><a href="#92-下列关于稀疏矩阵的说法正确的是" class="headerlink" title="92.下列关于稀疏矩阵的说法正确的是"></a>92.下列关于稀疏矩阵的说法正确的是</h4><p><strong>选项:</strong><br>A.只有少部分不是零<br>B.全不是零<br>C.大多数元素是零<br>D.全部是零</p><p><strong>答案:</strong>A.只有少部分不是零,C.大多数元素是零</p><p><strong>解析:</strong>稀疏矩阵是指大多数元素为零，只有少部分元素不是零。</p><h4 id="93-线索二叉树可以分为"><a href="#93-线索二叉树可以分为" class="headerlink" title="93.线索二叉树可以分为"></a>93.线索二叉树可以分为</h4><p><strong>选项:</strong><br>A.中根线索二叉树<br>B.先根线索二叉树<br>C.无根线索二叉树<br>D.后根线索二叉树</p><p><strong>答案:</strong>A.中根线索二叉树,B.先根线索二叉树,D.后根线索二叉树</p><p><strong>解析:</strong>线索二叉树可以分为中根线索二叉树、先根线索二叉树和后根线索二叉树。</p><h4 id="94-设入栈的序列是1，2，3，4，则不可能的出栈序列是"><a href="#94-设入栈的序列是1，2，3，4，则不可能的出栈序列是" class="headerlink" title="94.设入栈的序列是1，2，3，4，则不可能的出栈序列是"></a>94.设入栈的序列是1，2，3，4，则不可能的出栈序列是</h4><p><strong>选项:</strong><br>A.2，1，3，4<br>B.1，2，4，3<br>C.3，4，1，2<br>D.4，3，1，2</p><p><strong>答案:</strong>C.3，4，1，2,D.4，3，1，2</p><p><strong>解析:</strong>根据栈的后进先出原则，序列3，4，1，2和4，3，1，2不可能通过栈操作实现。</p><h4 id="95-下面哪些是线性表的操作"><a href="#95-下面哪些是线性表的操作" class="headerlink" title="95.下面哪些是线性表的操作"></a>95.下面哪些是线性表的操作</h4><p><strong>选项:</strong><br>A.按值查找<br>B.求表长<br>C.输出表<br>D.读取元素</p><p><strong>答案:</strong>A.按值查找,B.求表长,C.输出表,D.读取元素</p><p><strong>解析:</strong>线性表的基本操作包括按值查找、求表长、输出表和读取元素。</p><h4 id="96-下面不是衡量算法的标准是"><a href="#96-下面不是衡量算法的标准是" class="headerlink" title="96.下面不是衡量算法的标准是"></a>96.下面不是衡量算法的标准是</h4><p><strong>选项:</strong><br>A.可读性<br>B.输出<br>C.输入<br>D.正确性</p><p><strong>答案:</strong>B.输出,C.输入</p><p><strong>解析:</strong>衡量算法的标准包括可读性、正确性、效率和健壮性。输入和输出是算法的基本要求，但不是衡量标准。</p><h4 id="97-排序有"><a href="#97-排序有" class="headerlink" title="97.排序有"></a>97.排序有</h4><p><strong>选项:</strong><br>A.交换排序<br>B.插入排序<br>C.选择排序<br>D.倒排序</p><p><strong>答案:</strong>A.交换排序,B.插入排序,C.选择排序</p><p><strong>解析:</strong>常见的排序算法包括交换排序、插入排序和选择排序。倒排序不是一种常见的排序算法。</p><h4 id="98-选择排序可分为"><a href="#98-选择排序可分为" class="headerlink" title="98.选择排序可分为"></a>98.选择排序可分为</h4><p><strong>选项:</strong><br>A.直接选择排序<br>B.交换选择排序<br>C.快度选择排序<br>D.堆排序</p><p><strong>答案:</strong>A.直接选择排序,D.堆排序</p><p><strong>解析:</strong>选择排序包括直接选择排序和堆排序。交换选择排序和快度选择排序不是选择排序的类型。</p><h4 id="99-关于链式队列的描述正确的是"><a href="#99-关于链式队列的描述正确的是" class="headerlink" title="99.关于链式队列的描述正确的是"></a>99.关于链式队列的描述正确的是</h4><p><strong>选项:</strong><br>A.存储空间连续<br>B.存储空间可以不连续<br>C.方便插入<br>D.方便查找</p><p><strong>答案:</strong>B.存储空间可以不连续,C.方便插入</p><p><strong>解析:</strong>链式队列的存储空间可以不连续，插入操作方便，但查找操作不如顺序存储结构高效。</p><h4 id="100-哈希函数有哪些构造方法"><a href="#100-哈希函数有哪些构造方法" class="headerlink" title="100.哈希函数有哪些构造方法"></a>100.哈希函数有哪些构造方法</h4><p><strong>选项:</strong><br>A.数字分析法<br>B.直接地址法<br>C.除余法<br>D.平方取中法</p><p><strong>答案:</strong>A.数字分析法,B.直接地址法,C.除余法,D.平方取中法</p><p><strong>解析:</strong>哈希函数的常见构造方法包括数字分析法、直接地址法、除余法和平方取中法。</p><h4 id="101-算法的性能标准有"><a href="#101-算法的性能标准有" class="headerlink" title="101.算法的性能标准有"></a>101.算法的性能标准有</h4><p><strong>选项:</strong><br>A.可读性<br>B.正确性<br>C.效率<br>D.健壮性</p><p><strong>答案:</strong>A.可读性,B.正确性,C.效率,D.健壮性</p><p><strong>解析:</strong>衡量算法的性能标准包括可读性、正确性、效率和健壮性。</p><h4 id="102-数组的顺序存储结构有"><a href="#102-数组的顺序存储结构有" class="headerlink" title="102.数组的顺序存储结构有"></a>102.数组的顺序存储结构有</h4><p><strong>选项:</strong><br>A.以列为主序存放<br>B.以行为主序顺序存放<br>C.以上说法都不对<br>D.链式存放</p><p><strong>答案:</strong>A.以列为主序存放,B.以行为主序顺序存放</p><p><strong>解析:</strong>数组的顺序存储结构可以以列为主序存放或以行为主序存放。链式存放不属于顺序存储结构。</p><h4 id="103-关于数据项说法正确的是"><a href="#103-关于数据项说法正确的是" class="headerlink" title="103.关于数据项说法正确的是"></a>103.关于数据项说法正确的是</h4><p><strong>选项:</strong><br>A.又称字段<br>B.文件的最小单位<br>C.是文件的一个信息<br>D.也称域</p><p><strong>答案:</strong>A.又称字段,B.文件的最小单位,D.也称域</p><p><strong>解析:</strong>数据项又称为字段或域，是文件的最小单位。</p><h4 id="104-哈希表的删除算法有哪几种情况"><a href="#104-哈希表的删除算法有哪几种情况" class="headerlink" title="104.哈希表的删除算法有哪几种情况"></a>104.哈希表的删除算法有哪几种情况</h4><p><strong>选项:</strong><br>A.待删除点位于单链表的表尾<br>B.同义词单链表为空表<br>C.其他情况<br>D.待删除点位于单链表的表首</p><p><strong>答案:</strong>B.同义词单链表为空表,C.其他情况,D.待删除点位于单链表的表首</p><p><strong>解析:</strong>哈希表的删除算法包括同义词单链表为空表、待删除点位于单链表的表首和其他情况。</p><h4 id="105-下列属于选择排序的是"><a href="#105-下列属于选择排序的是" class="headerlink" title="105.下列属于选择排序的是"></a>105.下列属于选择排序的是</h4><p><strong>选项:</strong><br>A.快速排序<br>B.冒泡排序<br>C.堆排序<br>D.直接选择排序</p><p><strong>答案:</strong>C.堆排序,D.直接选择排序</p><p><strong>解析:</strong>选择排序包括堆排序和直接选择排序。快速排序和冒泡排序不属于选择排序。</p><h4 id="106-下列是算法的特性的是"><a href="#106-下列是算法的特性的是" class="headerlink" title="106.下列是算法的特性的是"></a>106.下列是算法的特性的是</h4><p><strong>选项:</strong><br>A.可行性<br>B.确定性<br>C.有0个或多个输入<br>D.有穷性</p><p><strong>答案:</strong>A.可行性,B.确定性,C.有0个或多个输入,D.有穷性</p><p><strong>解析:</strong>算法的特性包括可行性、确定性、有0个或多个输入和有穷性。</p><h4 id="107-交换排序可分为"><a href="#107-交换排序可分为" class="headerlink" title="107.交换排序可分为"></a>107.交换排序可分为</h4><p><strong>选项:</strong><br>A.交换排序<br>B.冒泡排序<br>C.快速排序<br>D.选择排序</p><p><strong>答案:</strong>B.冒泡排序,C.快速排序</p><p><strong>解析:</strong>交换排序包括冒泡排序和快速排序。选择排序不属于交换排序。</p><h4 id="108-树的表示方法有"><a href="#108-树的表示方法有" class="headerlink" title="108.树的表示方法有"></a>108.树的表示方法有</h4><p><strong>选项:</strong><br>A.文氏图法<br>B.倒悬树法<br>C.括号法<br>D.凹入法</p><p><strong>答案:</strong>A.文氏图法,B.倒悬树法,C.括号法,D.凹入法</p><p><strong>解析:</strong>树的表示方法包括文氏图法、倒悬树法、括号法和凹入法。</p><h4 id="109-下列排序的时间复杂度为O-n-logn-的是"><a href="#109-下列排序的时间复杂度为O-n-logn-的是" class="headerlink" title="109.下列排序的时间复杂度为O(n\logn)的是"></a>109.下列排序的时间复杂度为<script type="math/tex">O(n\logn)</script>的是</h4><p><strong>选项:</strong><br>A.折半插入排序<br>B.直接插入排序<br>C.堆排序<br>D.希尔排序</p><p><strong>答案:</strong>C.堆排序,D.希尔排序</p><p><strong>解析:</strong>堆排序和希尔排序的时间复杂度为<script type="math/tex">O(n\logn)</script>。折半插入排序和直接插入排序的时间复杂度为<script type="math/tex">O(n^2)</script>。</p><h4 id="110-数据的逻辑结构有"><a href="#110-数据的逻辑结构有" class="headerlink" title="110.数据的逻辑结构有"></a>110.数据的逻辑结构有</h4><p><strong>选项:</strong><br>A.线形<br>B.集合<br>C.网状<br>D.树形</p><p><strong>答案:</strong>A.线形,B.集合,C.网状,D.树形</p><p><strong>解析:</strong>数据的逻辑结构包括线形结构、集合结构、网状结构和树形结构。</p><h3 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h3><h4 id="1-消除递归不一定需要使用栈"><a href="#1-消除递归不一定需要使用栈" class="headerlink" title="1. 消除递归不一定需要使用栈"></a>1. 消除递归不一定需要使用栈</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 消除递归可以通过使用循环和其他方法实现，不一定需要使用栈。</p><h4 id="2-在一棵二叉树中，假定每个结点只有左子树，没有右子树，对它分别进行中序遍历和后序遍历，则具有相同的结果。"><a href="#2-在一棵二叉树中，假定每个结点只有左子树，没有右子树，对它分别进行中序遍历和后序遍历，则具有相同的结果。" class="headerlink" title="2. 在一棵二叉树中，假定每个结点只有左子树，没有右子树，对它分别进行中序遍历和后序遍历，则具有相同的结果。"></a>2. 在一棵二叉树中，假定每个结点只有左子树，没有右子树，对它分别进行中序遍历和后序遍历，则具有相同的结果。</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 如果每个结点只有左子树，那么中序遍历和后序遍历的结果相同，因为遍历顺序都是从左到右。</p><h4 id="3-由二叉树的先根序列和后根序列可以唯一的确定一棵二叉树"><a href="#3-由二叉树的先根序列和后根序列可以唯一的确定一棵二叉树" class="headerlink" title="3. 由二叉树的先根序列和后根序列可以唯一的确定一棵二叉树"></a>3. 由二叉树的先根序列和后根序列可以唯一的确定一棵二叉树</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 由二叉树的先根序列和后根序列不能唯一确定一棵二叉树，因为无法确定左右子树的分界。</p><h4 id="4-串的存储结构有顺序存储和链式存储"><a href="#4-串的存储结构有顺序存储和链式存储" class="headerlink" title="4. 串的存储结构有顺序存储和链式存储"></a>4. 串的存储结构有顺序存储和链式存储</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 串的存储结构包括顺序存储和链式存储。</p><h4 id="5-在线性表的顺序存储结构中，逻辑上相邻的数据元素在物理位置上不相邻的"><a href="#5-在线性表的顺序存储结构中，逻辑上相邻的数据元素在物理位置上不相邻的" class="headerlink" title="5. 在线性表的顺序存储结构中，逻辑上相邻的数据元素在物理位置上不相邻的"></a>5. 在线性表的顺序存储结构中，逻辑上相邻的数据元素在物理位置上不相邻的</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 在顺序存储结构中，逻辑上相邻的数据元素在物理位置上也是相邻的。</p><h4 id="6-希尔排序又称为缩小增量排序方法"><a href="#6-希尔排序又称为缩小增量排序方法" class="headerlink" title="6. 希尔排序又称为缩小增量排序方法"></a>6. 希尔排序又称为缩小增量排序方法</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 希尔排序也称为缩小增量排序方法，是插入排序的一种改进版本。</p><h4 id="7-用非递归方法实现递归算法时一定要使用递归工作栈"><a href="#7-用非递归方法实现递归算法时一定要使用递归工作栈" class="headerlink" title="7. 用非递归方法实现递归算法时一定要使用递归工作栈"></a>7. 用非递归方法实现递归算法时一定要使用递归工作栈</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 用非递归方法实现递归算法时，通常需要使用栈来模拟递归的调用过程。</p><h4 id="8-队列的链式存储结构需要使用两个指针"><a href="#8-队列的链式存储结构需要使用两个指针" class="headerlink" title="8. 队列的链式存储结构需要使用两个指针"></a>8. 队列的链式存储结构需要使用两个指针</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 队列的链式存储结构需要使用两个指针，一个指向队头，一个指向队尾。</p><h4 id="9-线性表的存储都是线形的"><a href="#9-线性表的存储都是线形的" class="headerlink" title="9. 线性表的存储都是线形的"></a>9. 线性表的存储都是线形的</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 线性表的存储结构可以是顺序存储或链式存储，不一定都是线形的。</p><h4 id="10-查找是从大量数据元素中找出某个特定的数据元素"><a href="#10-查找是从大量数据元素中找出某个特定的数据元素" class="headerlink" title="10. 查找是从大量数据元素中找出某个特定的数据元素"></a>10. 查找是从大量数据元素中找出某个特定的数据元素</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 查找是指从大量数据元素中找出某个特定的数据元素。</p><h4 id="11-图是一种非线性的结构"><a href="#11-图是一种非线性的结构" class="headerlink" title="11. 图是一种非线性的结构"></a>11. 图是一种非线性的结构</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 图是一种非线性数据结构，由顶点和边组成，用于表示实体之间的关系。</p><h4 id="12-采用链式存储结构的栈称为链栈"><a href="#12-采用链式存储结构的栈称为链栈" class="headerlink" title="12. 采用链式存储结构的栈称为链栈"></a>12. 采用链式存储结构的栈称为链栈</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 采用链式存储结构的栈称为链栈，链栈使用链表实现栈的操作。</p><h4 id="13-串是一种不受限制的线性表"><a href="#13-串是一种不受限制的线性表" class="headerlink" title="13. 串是一种不受限制的线性表"></a>13. 串是一种不受限制的线性表</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 串是一种受限制的线性表，主要用于存储和操作字符序列。</p><h4 id="14-数据的逻辑结构是指各数据元素之间的逻辑关系，是用户根据应用需要建立的。"><a href="#14-数据的逻辑结构是指各数据元素之间的逻辑关系，是用户根据应用需要建立的。" class="headerlink" title="14. 数据的逻辑结构是指各数据元素之间的逻辑关系，是用户根据应用需要建立的。"></a>14. 数据的逻辑结构是指各数据元素之间的逻辑关系，是用户根据应用需要建立的。</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 数据的逻辑结构是指数据元素之间的逻辑关系，是用户根据应用需求建立的。</p><h4 id="15-算法的描述方法只有语言方式"><a href="#15-算法的描述方法只有语言方式" class="headerlink" title="15. 算法的描述方法只有语言方式"></a>15. 算法的描述方法只有语言方式</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 算法的描述方法包括语言方式、伪代码、流程图等多种方式。</p><h4 id="16-顺序表和一维数组一样，都可以按下标随机-或直接-访问"><a href="#16-顺序表和一维数组一样，都可以按下标随机-或直接-访问" class="headerlink" title="16. 顺序表和一维数组一样，都可以按下标随机(或直接)访问"></a>16. 顺序表和一维数组一样，都可以按下标随机(或直接)访问</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 顺序表和一维数组都可以按下标随机访问，因为它们的存储空间是连续的。</p><h4 id="17-平衡二叉排序树左子树和右子树的深度之差的绝对值不超过1"><a href="#17-平衡二叉排序树左子树和右子树的深度之差的绝对值不超过1" class="headerlink" title="17. 平衡二叉排序树左子树和右子树的深度之差的绝对值不超过1"></a>17. 平衡二叉排序树左子树和右子树的深度之差的绝对值不超过1</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 平衡二叉排序树（如AVL树）的左子树和右子树的深度之差的绝对值不超过1，以保持树的平衡。</p><h4 id="18-在线性表的链式存储结构中，逻辑上相邻的数据元素在物理位置上是无关的"><a href="#18-在线性表的链式存储结构中，逻辑上相邻的数据元素在物理位置上是无关的" class="headerlink" title="18. 在线性表的链式存储结构中，逻辑上相邻的数据元素在物理位置上是无关的"></a>18. 在线性表的链式存储结构中，逻辑上相邻的数据元素在物理位置上是无关的</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 在线性表的链式存储结构中，逻辑上相邻的数据元素在物理位置上可以不连续，存储位置是无关的。</p><h4 id="19-栈是一种只能在一端进行插入或删除的线形表"><a href="#19-栈是一种只能在一端进行插入或删除的线形表" class="headerlink" title="19. 栈是一种只能在一端进行插入或删除的线形表"></a>19. 栈是一种只能在一端进行插入或删除的线形表</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 栈是一种只能在一端（栈顶）进行插入或删除操作的线性表，遵循后进先出（LIFO）原则。</p><h4 id="20-排序又称为分类，指将一批杂乱的数据序列重新安排成有序序列"><a href="#20-排序又称为分类，指将一批杂乱的数据序列重新安排成有序序列" class="headerlink" title="20. 排序又称为分类，指将一批杂乱的数据序列重新安排成有序序列"></a>20. 排序又称为分类，指将一批杂乱的数据序列重新安排成有序序列</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 排序是将一批杂乱的数据序列重新安排成有序序列的过程，常用于优化其他算法的效率</p><h4 id="21-一棵赫夫曼树中不存在度为1的结点"><a href="#21-一棵赫夫曼树中不存在度为1的结点" class="headerlink" title="21. 一棵赫夫曼树中不存在度为1的结点"></a>21. 一棵赫夫曼树中不存在度为1的结点</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 赫夫曼树是一种最优二叉树，其中每个非叶子结点都有两个子结点，因此不存在度为1的结点。</p><h4 id="22-在一个顺序存储的循环队列中，队头指针指向队头元素的后一个位置"><a href="#22-在一个顺序存储的循环队列中，队头指针指向队头元素的后一个位置" class="headerlink" title="22. 在一个顺序存储的循环队列中，队头指针指向队头元素的后一个位置"></a>22. 在一个顺序存储的循环队列中，队头指针指向队头元素的后一个位置</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 在顺序存储的循环队列中，队头指针指向队头元素的位置，而不是后一个位置。</p><h4 id="23-栈只能在栈尾进行插入和删除"><a href="#23-栈只能在栈尾进行插入和删除" class="headerlink" title="23. 栈只能在栈尾进行插入和删除"></a>23. 栈只能在栈尾进行插入和删除</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 栈是一种只能在一端（栈顶）进行插入和删除操作的线性表。</p><h4 id="24-队列只能在队首进行删除，在队尾进行插入"><a href="#24-队列只能在队首进行删除，在队尾进行插入" class="headerlink" title="24. 队列只能在队首进行删除，在队尾进行插入"></a>24. 队列只能在队首进行删除，在队尾进行插入</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 正确</p><p><strong>解析:</strong> 队列是一种先进先出（FIFO）的数据结构，只能在队首进行删除操作，在队尾进行插入操作。</p><h4 id="25-冒泡排序法是快速排序的一种改进"><a href="#25-冒泡排序法是快速排序的一种改进" class="headerlink" title="25. 冒泡排序法是快速排序的一种改进"></a>25. 冒泡排序法是快速排序的一种改进</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 冒泡排序和快速排序是两种不同的排序算法，快速排序不是冒泡排序的改进。</p><h4 id="26-在二叉搜索树中，若各结点的搜索概率不等，使得搜索概率越小的结点离树根越近，则得到的是最优二叉搜索树"><a href="#26-在二叉搜索树中，若各结点的搜索概率不等，使得搜索概率越小的结点离树根越近，则得到的是最优二叉搜索树" class="headerlink" title="26. 在二叉搜索树中，若各结点的搜索概率不等，使得搜索概率越小的结点离树根越近，则得到的是最优二叉搜索树"></a>26. 在二叉搜索树中，若各结点的搜索概率不等，使得搜索概率越小的结点离树根越近，则得到的是最优二叉搜索树</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 最优二叉搜索树是根据结点的搜索概率构造的，使得搜索概率越大的结点离树根越近，以最小化平均搜索代价。</p><h4 id="27-有向图中，每个结点的出度等于入度"><a href="#27-有向图中，每个结点的出度等于入度" class="headerlink" title="27. 有向图中，每个结点的出度等于入度"></a>27. 有向图中，每个结点的出度等于入度</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 在有向图中，每个结点的出度和入度不一定相等。出度是指从该结点出发的边的数量，入度是指指向该结点的边的数量。</p><h4 id="28-树属于线性的结构"><a href="#28-树属于线性的结构" class="headerlink" title="28. 树属于线性的结构"></a>28. 树属于线性的结构</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 树是一种非线性数据结构，用于表示层次关系。</p><h4 id="29-直接选择排序是一种稳定的排序方法"><a href="#29-直接选择排序是一种稳定的排序方法" class="headerlink" title="29. 直接选择排序是一种稳定的排序方法"></a>29. 直接选择排序是一种稳定的排序方法</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 直接选择排序是不稳定的排序方法，因为在排序过程中可能改变相同元素的相对顺序。这题那个答案是正确，我认为绝对是错的。</p><h4 id="30-二叉树中，任何一个结点的度为2"><a href="#30-二叉树中，任何一个结点的度为2" class="headerlink" title="30. 二叉树中，任何一个结点的度为2"></a>30. 二叉树中，任何一个结点的度为2</h4><p><strong>选项:</strong></p><ul><li>正确</li><li>错误</li></ul><p><strong>答案:</strong> 错误</p><p><strong>解析:</strong> 二叉树中的结点的度可以是0、1或2，不一定都是2。</p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能机器人</title>
      <link href="/posts/9962.html"/>
      <url>/posts/9962.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器人系统基础"><a href="#机器人系统基础" class="headerlink" title="机器人系统基础"></a>机器人系统基础</h1><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.png" alt="思维导图"></p><p><img src="https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/%E5%A4%9A%E6%BB%A8%E4%B9%A0%E9%A2%98.png" alt="多滨课上习题"></p><h2 id="机械臂结构"><a href="#机械臂结构" class="headerlink" title="机械臂结构"></a>机械臂结构</h2><h3 id="机械臂分类与作用"><a href="#机械臂分类与作用" class="headerlink" title="机械臂分类与作用"></a>机械臂分类与作用</h3><ul><li><p>机械手臂分类</p><ul><li><p>空间几何运动形式</p><ul><li><p>直角坐标系型</p><ul><li><p>PPP的作业空间是一个长方形</p><ul><li>优点：构造相对简单，经济成本低，控制简单。</li><li>缺点：机械臂的移动只能是直线，或者说是折线，运动不灵活。</li></ul></li></ul></li><li><p>圆柱坐标系型</p><ul><li><p>圆柱坐标型机械臂</p><ul><li>优点：直观性更好，结构简单，机械臂所占空间小且在空间中运动辐射范围大、</li><li>缺点：灵活度有一定局限性。</li></ul></li></ul></li><li><p>球坐标系型</p><ul><li><p>球型坐标系机械臂</p><ul><li>优点：灵活性更高，可以相对自由的移动到球体空间的任意位置，动作范围大。</li></ul></li></ul></li></ul></li><li><p>驱动方式</p><ul><li><p>电气驱动</p><ul><li>电机驱动常采用不同的伺服电机，虽然手臂整体构造比较简单，但仍能实现复杂的运动，并且控制精度高，反应速度也灵敏，智慧化程度很高。能耗一般较小，常用于轻载或中载场合。</li></ul></li><li><p>液压驱动</p><ul><li>液压驱动需要装配电机和液压泵外，还需要需要搭配不同的管道，手臂结构比电机驱动更为复杂。虽然液压驱动智慧化程度低，很难实现复杂的动作，动作也比较迟缓，能耗高，但可以实现大功率，大转矩输出。常用于重载场合。</li></ul></li><li><p>气压驱动</p><ul><li>气压驱动则需要搭载电机和气泵，也需要安装管道，结构也比较复杂。智慧化程度一般，一般实现抓取这类简单的动作，动作迅速，能耗一般，常用于轻载场合。</li></ul></li></ul></li></ul></li><li><p>机械臂的作用</p><ul><li>1、机械臂可以改善劳动条件，避免人身事故。</li><li>2、可以减轻劳动强度，提高生产效率。实现生产过程中的自动化，智能化。</li><li>3、实现完成人手不能做的工作。</li></ul></li></ul><h3 id="机械臂机构设计"><a href="#机械臂机构设计" class="headerlink" title="机械臂机构设计"></a>机械臂机构设计</h3><ul><li><p>机械臂的组成</p></li><li><ul><li><p>手部</p><ul><li><p>用途</p><ul><li><p>手爪</p><ul><li>手爪的主要功能是抓住工件、握持工件和释放工件。</li></ul></li><li><p>操作工具</p><ul><li>作业工具是进行某种作业的专用工具。</li></ul></li></ul></li><li><p>夹持原理</p><ul><li><p>机械钳爪式</p><ul><li><p>内撑式</p><ul><li></li></ul></li><li><p>外夹式</p><ul><li></li></ul></li></ul></li><li><p>吸附式</p><ul><li><p>磁力吸附式</p><ul><li></li></ul></li><li><p>真空吸附式</p><ul><li></li></ul></li></ul></li></ul></li></ul></li><li><p>腕部</p><ul><li><p>腕部设计分类</p><ul><li>自由度是指机械手各运动部件在三维空间坐标轴上所具有的独立运动数</li><li><p>腕部</p><ul><li><p>单自由度</p><ul><li>回转型R</li><li>俯仰型P</li><li>一般单自由度手腕的运动形式为俯仰型（用字母P表示）或回转型（我们用字母R表示）。单自由度手腕的运动轨迹是一条线。</li></ul></li><li><p>二自由度</p><ul><li>二自由度手腕则是俯仰型和回转型的组合。可以组合成双俯仰型和俯仰回转型，但是不能构成双回转型。二自由度手腕的运动空间是一个面。</li></ul></li><li><p>三自由度</p><ul><li>三自由度手腕同样是俯仰型和回转型的组合。常用的结构PPR,RRR,PRR,RPR。三自由度手腕的运动空间是一个立体空间。</li></ul></li></ul></li><li><p>臂部</p></li><li><p>臂部可由大臂、小臂或多臂所组成，其作用是支撑手部和腕部，并且可以通过伸缩、回转、俯仰和升降等运动改变手部的空间位置。</p><pre><code>  - 臂部设计的基本要求      - ①手臂应具备足够的承载能力和刚度      - ②手臂质量和转动惯量要小      - ③手臂运动要平稳，定位精度要高      - ④手臂导向性要好</code></pre></li><li><p>立柱</p><ul><li>立柱是支撑手臂的部件，立柱也可以是手臂的一部分，手臂的回转运动和升降运动均与立柱有密切的联系。</li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>    - 机座        - 机座是机械手的基础部分，起到固定支持和作用，机械臂驱动系统通常安装于机座上。        - 机座的设计方式            - 移动式            - 非移动式</code></pre><ul><li><p>系统分析</p><ul><li>①根据机械臂的使用场合，明确机械臂的目的和任务。</li><li>②分析机械臂所在系统的工作环境，包括机械臂与已有设备的兼容性。</li><li>认真分析系统的工作要求，确定机械臂的基本功能和方案。</li></ul></li><li><p>技术设计</p><ul><li>1.机械臂基本参数的确定</li><li>2.机械臂运动形式的选择</li><li>3.拟定检测传感系统框图</li><li>4.确定控制系统总方案，绘制框图</li><li>5.机械结构设计</li></ul></li></ul><h2 id="机器人行走机构"><a href="#机器人行走机构" class="headerlink" title="机器人行走机构"></a>机器人行走机构</h2><h3 id="轮式行走机构"><a href="#轮式行走机构" class="headerlink" title="轮式行走机构"></a>轮式行走机构</h3><ul><li><p>两轮轮系</p><ul><li>1.当两驱动轮具有相同的速度时，机器人进行直线运动</li><li>2.当一个驱动轮的速度为零，另一个驱动轮速度不为零时，机器人绕前一驱动轮与地面的接触点作旋转运动</li><li>3.当两驱动轮速度出现其他情况时，机器人的运动将会是这两种分运动的合运动</li></ul></li><li><p>三轮轮系</p></li><li>四轮轮系</li><li><p>轮式行走机构特点</p><ul><li>运动速度快</li><li>能量消耗少</li><li>机械结构简单</li><li>运动控制容易</li><li>但其环境适应性差，常用于平坦无阻的地面环境</li></ul></li></ul><h3 id="履带式移动机构"><a href="#履带式移动机构" class="headerlink" title="履带式移动机构"></a>履带式移动机构</h3><ul><li><p>履带式行走机构的特征是将圆环状的履带卷绕在多个车轮上，使车轮不直接同地面接触，而是利用履带缓和地面的凹凸不平。</p><ul><li><p>同步带</p><ul><li>优点：效率高，设计简单。</li><li>缺点：同步带应用灵活性差</li></ul></li><li><p>活节带</p><ul><li>优点：活节履带可以任意增减履块，因此更灵活。</li><li>缺点：①各履块之间靠连杆连接，若连杆处受力不均则容易发生损坏。②活节履块运行噪音较大</li></ul></li></ul></li><li><p>履带式行走机构的特点</p><ul><li>履带式行走机构稳定性好、越野能力和地面适应能力强。</li><li>但其机械结构复杂，质量大；不仅能耗大，而且运动速度慢，噪声大。</li></ul></li></ul><h3 id="足式移动机构"><a href="#足式移动机构" class="headerlink" title="足式移动机构"></a>足式移动机构</h3><ul><li><p>足式机构的优势</p><ul><li>适应力强</li><li>具有主动隔振能力</li><li>自恢复平稳性</li><li>能耗低</li></ul></li><li><p>两足结构</p><ul><li>两足步行机器人具有良好的环境适应性，其运动结构也最接近人类，故也被称为“类人双足行走机器人”。</li></ul></li><li><p>四足结构</p></li><li><p>六足结构</p><ul><li><ul><li><p>周期步态</p><ul><li><p>二步态</p><ul><li>二步态将机器人的六足分为两组，每组有三条足且均为摆动相或支撑相</li><li>机器人运动过程中一组为摆动相，则另一组为支撑相，两组在摆动相和支撑相间循环切换</li><li>摆腿的顺序为153-426-153</li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>  - 三步态    - 摆腿的顺序为15-26-34-15  - 六步态    - 摆腿的顺序为4-2-6-1-5-3-4-2-6      - </code></pre><h3 id="轮式、履带式、足式行走机构的比较"><a href="#轮式、履带式、足式行走机构的比较" class="headerlink" title="轮式、履带式、足式行走机构的比较"></a>轮式、履带式、足式行走机构的比较</h3><ul><li>1、轮式机器人更适合平坦的路面，并且能高速移动。但容易打滑，不平稳，对复杂地形无能为力。</li><li>2、履带式机器人能更好的适应松软的地形。履带与地面接触面积大，运动更加平稳。缺点是无法应对高低落差较大的地形。</li><li>3、足式机器人几乎可以适应各种复杂地形，能够跨越障碍，缺点是行进速度较低，运动控制更加复杂。</li></ul><h2 id="机器人驱动机构"><a href="#机器人驱动机构" class="headerlink" title="机器人驱动机构"></a>机器人驱动机构</h2><h3 id="驱动电机"><a href="#驱动电机" class="headerlink" title="驱动电机"></a>驱动电机</h3><ul><li><p>特点及要求</p><ul><li>1 可控性高</li><li>2 精度高</li><li>3 可靠性高</li><li>4 响应迅速</li><li>5 环境适应性强</li></ul></li><li><p>分类</p><ul><li><p>伺服电机</p><ul><li>直流伺服电机</li><li>交流伺服电机</li><li><p>转速和转向取决于电压和相位</p><ul><li></li></ul></li></ul></li><li><p>直流电动机</p><ul><li>有刷直流电机</li><li>无刷直流电机</li></ul></li><li><p>步进电机</p><ul><li>步进电机是一种将电脉冲信号转化为角位移的执行机构</li><li>每输入一个脉冲，步进电机就按设定的方向转动一个固定的角度。</li><li></li><li><p>步进电机特点</p><ul><li>步进电机具有惯量低、定位精度高、无累积误差、控制简单等特点</li><li>广泛应用于机电一体化产品，如数控机床、机械臂、计算机外部设备等。</li></ul></li></ul></li></ul></li></ul><h3 id="驱动控制"><a href="#驱动控制" class="headerlink" title="驱动控制"></a>驱动控制</h3><ul><li><p>驱动控制任务</p><ul><li>姿态稳定控制</li><li>路径跟踪控制</li><li>轨迹跟踪控制</li></ul></li><li><p>底层控制任务</p><ul><li><p>速度控制</p><ul><li></li></ul></li><li><p>位置控制</p><ul><li></li></ul></li><li><p>航向角控制</p></li></ul></li><li><p>控制策略</p><ul><li><p>PID控制</p><ul><li></li><li><p>特点</p><ul><li>PID控制算法结构简单、易于实现，并具有较强的鲁棒性</li><li>当被控对象的结构和参数不能完全掌握，或得不到精确的数学模型时，应用PID控制技术最为方便</li><li>PID控制算法参数的整定就是PID算法中的kp、ki、kd参数，使相应的计算机控制系统输出的动态响应满足某种性能要求</li></ul></li></ul></li><li><p>变结构控制</p></li><li>自适应控制</li><li>模糊控制</li><li>神经网络控制</li></ul></li></ul><h3 id="驱动电源"><a href="#驱动电源" class="headerlink" title="驱动电源"></a>驱动电源</h3><h2 id="多机器人系统"><a href="#多机器人系统" class="headerlink" title="多机器人系统"></a>多机器人系统</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>更广泛的任务领域</li><li>更高的容错性</li><li>更强的鲁棒性</li><li>较好的内在的并行性</li><li>系统效率更高</li><li>经济成本更低</li><li>系统更加稳定可靠</li></ul><h3 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h3><ul><li><p>体系结构</p><ul><li><p>决定了多机器人系统在任务分配、规划、决策和执行过程中的运行机制，以及系统各机器人成员所担当的角色</p><ul><li>集中式</li><li>分布式</li><li>混合式</li></ul></li></ul></li><li><p>感知</p></li><li><p>通信</p><ul><li>显式通信</li><li>隐式通信</li><li>混合式通信</li></ul></li><li><p>协同规划</p></li></ul><h3 id="典型的多机器人系统"><a href="#典型的多机器人系统" class="headerlink" title="典型的多机器人系统"></a>典型的多机器人系统</h3><ul><li><p>群智能机器人系统</p><ul><li>由许多无差别的自治机器人组成的分布式系统，它主要研究如何使能力有限的个体机器人通过交互产生群体智能</li></ul></li><li><p>可重构机器人系统</p><ul><li>以一些具有不同功能的标准模块为组件，根据任务的需要，对这些模块进行组合，进而形成具有不同功能的系统。</li></ul></li><li><p>协作机器人系统</p><ul><li>由多个具有一定智能的自治机器人组成，机器人之间通过通信实现相互间的协作，来完成复杂的任务</li></ul></li></ul><h3 id="人机协作的关键技术"><a href="#人机协作的关键技术" class="headerlink" title="人机协作的关键技术"></a>人机协作的关键技术</h3><ul><li><ol><li>机构设计</li></ol></li><li><ol><li>多维感知</li></ol></li><li><ol><li>场所监视</li></ol></li><li><ol><li>规划测试</li></ol></li><li><ol><li>人机交互</li></ol></li></ul><h2 id="机器人智能"><a href="#机器人智能" class="headerlink" title="机器人智能"></a>机器人智能</h2><h3 id="基于行为的控制方法"><a href="#基于行为的控制方法" class="headerlink" title="基于行为的控制方法"></a>基于行为的控制方法</h3><ul><li><ul><li>控制单元将感知信息转换为执行器的指令</li><li>触发单元则用来决定控制单元何时动作</li><li>当传感器触发某种行为时，会立即作出相对应的动作</li></ul></li><li><p>机器人的运动</p><ul><li>感知单元</li><li><p>智能单元</p><ul><li>基于行为组</li><li>仲裁器</li></ul></li><li><p>执行单元</p></li></ul></li></ul><h3 id="基于机器人行为的实例"><a href="#基于机器人行为的实例" class="headerlink" title="基于机器人行为的实例"></a>基于机器人行为的实例</h3><ul><li><ul><li><p>任务分析</p><ul><li>1、识别目标物——区分墙体和箱子——箱子可以移动，墙体不能移动</li><li>2、运动避障——避开墙体——在碰到墙体的时候调整方向</li><li>3、推箱子——推箱子至A区域——依靠光线强弱推箱子</li></ul></li><li><p>任务行为分解</p><ul><li><p>避障行为</p><ul><li>在收集箱子中，机器人将向检测到的特定物体推动，这可以帮助机器人判别障碍物是不是箱子。如果机器人不能推动所检测到的物体，则认为它是障碍物。逃离行为将被触发。</li></ul></li><li><p>逃离行为</p><ul><li>当机器人无力推动的物体或发生碰撞时，逃离行为可以通过控制机器人后退和旋转，为其选择一个新的运动方向行进。</li></ul></li><li><p>暗中拒推行为</p><ul><li>可以有效的避免机器人将箱子推离光源位置。当机器人认为光线很暗时，机器人会停止运动，触发反向飞蛾行为</li></ul></li><li><p>反向飞蛾行为</p><ul><li>当机器人认为光线很暗，可以控制机器人转向行驶，从而将箱子推至目标区域内。</li></ul></li></ul></li><li><p>传统的控制方法</p><ul><li><p>“感知-建模-规划-执行”的控制策略</p><ul><li>扫描房间中环境信息，建立环境模型</li><li>定位箱子的位置</li><li>规划机器人运动的路径</li><li>依次将箱子推至A区域中</li></ul></li><li><p>自顶向下</p><ul><li><p>优点</p><ul><li>结构层次清晰，容易实现的模块功能，能具有高层次智能的行为。</li></ul></li><li><p>缺点</p><ul><li>系统实时性比较差，控制时间延长。当某一环节出现问题时，整个控制系统环链难以顺利执行。</li></ul></li></ul></li></ul></li><li><p>基于行为的控制方法</p><ul><li>通过搜索一系列可编程的“条件—动作”语句，实现对机器人的控制</li><li><p>自下而上</p><ul><li><p>优点</p><ul><li>机器人反应快速，传感器与执行器之间是一种直接映射的关系</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="模糊控制"><a href="#模糊控制" class="headerlink" title="模糊控制"></a>模糊控制</h3><ul><li>定义：用模糊数学的知识模仿人脑的思维方式，对模糊现象进行识别和判决，并给出控制量，对被控对象进行控制。</li><li>基本步骤：首先根据操作人员手动控制的经验，总结出一套完整的控制规则，再根据系统当前的运行状态，经过模糊推理、模糊判决等运算，求出控制量，实现对被控对象的控制。</li><li>主要特点：不需要建立对象的数学模型</li></ul><h3 id="模糊控制系统"><a href="#模糊控制系统" class="headerlink" title="模糊控制系统"></a>模糊控制系统</h3><ul><li></li><li><p>模糊化具体过程</p><ul><li></li></ul></li><li><p>知识库</p><ul><li><p>数据库</p><ul><li>隶属函数</li><li>尺度变换因子</li><li>模糊空间分级数</li></ul></li><li><p>模糊控制规则库</p><ul><li>模糊规则</li></ul></li></ul></li><li><p>模糊推理</p><ul><li>模糊推理是模糊控制器的核心</li><li>模糊推理：运用模糊逻辑中所蕴含关系和推理规则来进行模糊概念的推理</li></ul></li><li><p>清晰化</p><ul><li></li></ul></li></ul><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><ul><li><p>生物神经网络</p><ul><li>树突：接受信息</li><li>轴突：发送信息</li><li>当神经元所获得的输入信号，累计超过某个域值时，它就会处于兴奋状态，产生电脉冲，由上层神经元的轴突将电脉冲信号传递给下一层的神经元细胞树突</li><li>层层的神经元细胞相互连接，便构成了错综复杂的神经网络</li></ul></li><li><p>人工神经网络</p><ul><li><p>特点</p><ul><li>1、具有自主学习能力</li><li>2、具有联想存储功能</li><li>3、具有高速寻找优化解的能力</li><li>4、具有容错能力</li></ul></li><li><p>工作原理</p><ul><li></li></ul></li></ul></li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><ul><li><p>步骤</p><ul><li></li></ul></li><li><p>分类</p><ul><li>1、监督式学习</li><li>2、非监督式学习</li><li>3、半监督式学习</li><li>4、强化学习</li></ul></li></ul><h2 id="机器人通信系统"><a href="#机器人通信系统" class="headerlink" title="机器人通信系统"></a>机器人通信系统</h2><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ul><li><p>通信是利用电子信息技术建立一个信道，通过信道将信息源的信息传输到目的点</p><ul><li></li></ul></li><li><p>通信系统的基本模型</p><ul><li><ul><li>信源：把待传输的信息转换成原始电信号</li><li>发送设备（转换器）：将信源发出的信息变换成适合在信道中传输的信号，使原始信号适应信道传输要求</li><li><p>信道：传递信息的通道或传递信号的设施。</p><ul><li>有线信道</li><li>无线信道</li></ul></li><li><p>接收设备：把从信道上接收的信号变换成信息受信者可以接收的信息，起着还原信号的作用。</p></li><li>信宿（受信者）：信息接收者，可将复原的原始信号转换成相应的消息</li><li>噪声源：系统内各种干扰因素的等效集合</li></ul></li></ul></li><li><p>现代通信系统的功能模块</p><ul><li><p>接入功能模块</p><ul><li>将语言、图像或数据进行数字化后并变换为适合于网络传输的信号</li></ul></li><li><p>传输功能模块</p><ul><li>将接入的信号进行信道编码和调制，变为适合于传输的信号形式</li></ul></li><li><p>控制功能模块</p><ul><li>由信令网、交换设备和路由器等部件组成。它的作用是运营计费和数据保密</li></ul></li><li><p>应用功能模块</p><ul><li>为运营商提供视频、语音、娱乐等业务支持</li></ul></li></ul></li><li><p>机器人的通信系统</p><ul><li>机器人的通信系统是智能机器个体以及群体机器人协调工作中的一个重要组成部分</li><li><p>机器人的通信可以从通信对象角度分为内部通信和外部通信</p><ul><li><p>内部通信</p><ul><li>协调各功能模块间的协作</li></ul></li><li><p>外部通信</p><ul><li>协调机器人与控制者或者机器人之间的信息交互</li></ul></li></ul></li><li><p>机器人通信系统的要求</p><ul><li>稳定性好，通信质量高，延迟低</li><li>能耗低</li><li>体积小，易安装，易维修</li></ul></li><li><p>通信方式</p><ul><li><p>显式通信</p><ul><li><p>多机器人系统利用特定的通信介质，通过某种共有的规则和方式实现信息的传递</p><ul><li><p>直接通信</p><ul><li><p>要求发送者和接收者保持一致，即通信时发送者和接收者同时在线。因此，直接通信需要一种通讯协议</p><ul><li>如点对点通信</li></ul></li></ul></li><li><p>间接通信</p><ul><li><p>间接通信不需要发送者与接收者保持一致</p><ul><li>如广播、监听</li></ul></li></ul></li></ul></li></ul></li><li><p>隐式通信</p><ul><li><p>多机器人系统通过外界环境和自身传感器来获取所需的信息，并实现机器人之间的相互协作</p><ul><li><p>感知通信</p><ul><li><p>机器人利用自身传感器，通过感知环境的变化，并依据自身内部的推理和模型理解，进行相应的决策和协作</p><ul><li>如灯塔通信</li></ul></li></ul></li><li><p>环境通信</p><ul><li><p>机器人在通过传感器获取外界环境信息的同时也可能获取到其它机器人遗留在环境中的某些特定信息，从而进行信息传递</p><ul><li>如信息素通信</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>通信模型</p><ul><li><p>C/S 通信模型</p><ul><li>集中式结构</li><li><p>特点</p><ul><li>系统具有中心服务器，所有客户进程与服务器进程进行双向通信，客户进程间无直接通路。</li><li>C/S 通信适用于需要集中控制的场合，其结构简单，易于实现，便于错误诊断及系统维护。</li></ul></li></ul><p>-</p></li><li><p>P2P 通信模型</p><ul><li>分布式结构</li><li><p>特点</p><ul><li>节点间通信不经过中心服务器的转发，而是直接进行通信。</li><li>系统运行不依赖于模型中某个节点，因此系统负载较为均衡，可靠性高</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="传感器专题"><a href="#传感器专题" class="headerlink" title="传感器专题"></a>传感器专题</h2><p>1、什么是传感器<br>把非电量转换为电量的器件</p><p>2、传感器静态指标<br>线性度、灵敏度、重复性、分率力、精度等</p><p>3、电位器的分类<br>直线型电位器、旋转型电位器</p><p>3、常见测距的传感器<br>超声波传感器、红外线传感器</p><p>4、拾音器的构成和语音的基本参数<br>麦克风、放大器<br>语音的基本参数：声强、响度、音高、基因周期等。</p><p>5、压力测量的传感器<br>压电式传感器、应变片式传感器、电容式传感器</p><p>6、什么是电阻式传感器<br>电阻应变片的工作原理是基于应变效应<br>即导体或半导体材料在外界力的作用下产生机械变形时，其电阻值相应发生变化， 这种现象称为“应变效应”。<br>电阻式传感器通过测量电阻值的变化来感知物理量的变化，如温度、压力等。常见的电阻式传感器包括热敏电阻和应变片。</p><p>7、什么是霍尔效应<br>在导体或半导体中，当电流垂直于磁场方向流动时，会在垂直于电流和磁场的方向上产生电压差。这种效应被用于霍尔传感器中</p><p>8、电五官对应人体的那些感官</p><ul><li><strong>光敏传感器</strong>：视觉</li><li><strong>声敏传感器</strong>：听觉</li><li><strong>气敏传感器</strong>：嗅觉</li><li><strong>化学传感器</strong>：味觉</li><li><strong>触觉传感器</strong>：触觉</li></ul><p>9、陀螺仪传感器直接测量的物理量<br>角速度</p><p>10、激光扫描测距的方法<br>激光扫描测距通过发射激光束，当激光束遇到物体后被反射回传感器，传感器通过测量激光的飞行时间或相位差来计算物体到传感器的距离<br>方法：三角法、相位法</p><p>11、红外测距的原理<br>根据反射光的强弱判断物体的距离，距离近则反射光强，距离远则反射光弱。</p><p>12、超声波测距原理<br>通过测量超声波经反射到达接收传感器的时间和发射时间之差来实现机器人与障碍物之间的测距。</p><p>13、多传感器数据融合的目的和原理<br>目的：利用多个传感器共同联合的操作优势，提高传感器系统的有效性。<br>基本原理：充分利用多传感器资源，将多个传感器在空间和时间上的冗余、互补信息依据某种算法进行融合，获得对被测对象一致性解释或描述。再由辅助系统进行环境判定、从而形成更高层次的综合决策。</p><h2 id="智能机器人笔试"><a href="#智能机器人笔试" class="headerlink" title="智能机器人笔试"></a>智能机器人笔试</h2><h3 id="选择20分"><a href="#选择20分" class="headerlink" title="选择20分"></a>选择20分</h3><h3 id="判断10分"><a href="#判断10分" class="headerlink" title="判断10分"></a>判断10分</h3><h3 id="简答题40分"><a href="#简答题40分" class="headerlink" title="简答题40分"></a>简答题40分</h3><h3 id="创新题30分"><a href="#创新题30分" class="headerlink" title="创新题30分"></a>创新题30分</h3>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术测试</title>
      <link href="/posts/c03c.html"/>
      <url>/posts/c03c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活测试</title>
      <link href="/posts/31c7.html"/>
      <url>/posts/31c7.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复习测试</title>
      <link href="/posts/5112.html"/>
      <url>/posts/5112.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目测试</title>
      <link href="/posts/562a.html"/>
      <url>/posts/562a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一篇技术文章</title>
      <link href="/posts/a211.html"/>
      <url>/posts/a211.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/posts/4ea0.html"/>
      <url>/posts/4ea0.html</url>
      
        <content type="html"><![CDATA[<p>这是一条测试md</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语议论文写作模版</title>
      <link href="/posts/e1a.html"/>
      <url>/posts/e1a.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3793a8a1dc3922d71fc42ee84e897380b6e1a6e62074dab45a19cf597a47b8d9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 考试备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四六级 </tag>
            
            <tag> 考试备考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四六级备考指南</title>
      <link href="/posts/8ccc.html"/>
      <url>/posts/8ccc.html</url>
      
        <content type="html"><![CDATA[<h1 id="英语四六级备考指南"><a href="#英语四六级备考指南" class="headerlink" title="英语四六级备考指南"></a>英语四六级备考指南</h1><h3 id="时间分配建议："><a href="#时间分配建议：" class="headerlink" title="时间分配建议："></a>时间分配建议：</h3><p><img src="/img/src/六级时间分配.png" alt="时间分配"></p><p>第一部分是写作跟听力，这一部分是1小时，开始答题后30分钟写作时间，然后就开始播放听力了。<br>建议 ①写作 25min左右 留5min看听力 ②听力 35min 答完题后收第一张答题卡。</p><p>第二部分是阅读和翻译（这一部分是取舍问题，有效的时间拿更多的分，重点的地方可以适当多些时间）<br>答题顺序①仔细阅读 ②长篇阅读(段落匹配) ③翻译 ④选词填空<br>①仔细阅读：10×(2-2.5)min<br>②段落匹配：15-18min<br>③翻译：25min<br>④选词填空：剩多少时间用多少.</p><h3 id="写作模版"><a href="#写作模版" class="headerlink" title="写作模版"></a>写作模版</h3><ul><li><a href="https://whynotv.github.io/posts/e1a.html">英语议论文模版</a> </li></ul><h3 id="六级阅读"><a href="#六级阅读" class="headerlink" title="六级阅读"></a>六级阅读</h3><h4 id="段落匹配-方法"><a href="#段落匹配-方法" class="headerlink" title="段落匹配-方法"></a>段落匹配-方法</h4><ol><li>浏览题干选取定位词<br> 定位词选取：<ul><li>有专有先挑专有信息定位（比如 专有名词 人名、地名、机构名、年代、时间、数字、特殊符号）</li><li>没有专有挑名词（不可以是文章背景信息，因为背景信息的名词全篇出现）</li><li>实在没有名词再考虑形容词和动词的组合</li></ul></li><li>容易定位题目和能够暗示段落的题目优先做<br> recent / today / future 这类词 大概出现在文章的后置段落 (学术文章一般是有时间顺序 从古老-最近)<br> cost / spent : 花费 那就可能对应 有 货币符号、数字<br> stage : 步骤、阶段 那就可能对应 序数<br> different : 不同的 那就可能会 罗列信息 展示不同类别</li><li>剩下题目优先查找未出题段落</li><li>若该段落包含题目中两个及以上原词或者同转，则该段为答案</li></ol><p>注意：</p><ul><li>若两个题目定位在同一段落，可以额外划另外一个定位词验证</li><li>注意段落可能被复选</li></ul><p>文章结构：<br>  问题 (客观困难) 的描述，问题解决1 + 问题解决2 + 问题解决3 + 问题解决4 + 要求 建议 期待 未来 更好</p><h4 id="仔细阅读-方法"><a href="#仔细阅读-方法" class="headerlink" title="仔细阅读-方法"></a>仔细阅读-方法</h4><ol><li>理解题干大意并选取定位词</li><li>注意题干设问给我们的暗示</li><li>优先理解定位句当句内容，通过理解然后直接进行选项匹配</li><li>对于不好定位的题目可以使用“夹B原则”；单选题为顺序出题</li><li>无定位词的段落，从定位段落最后一句向上推，寻找第一次存在逻辑表达的句子；再理解句子内容，进行选项匹配</li></ol><p>注意：</p><ul><li>不推荐先浏览选项，容易先入为主；</li><li>不要从选项中划关键词回文章中定位；</li><li>应当先知道文章对应的答案表述句，再进行选项匹配 </li></ul><h4 id="选词填空-方法"><a href="#选词填空-方法" class="headerlink" title="选词填空-方法"></a>选词填空-方法</h4><p>嘻嘻嘻，我基本上做到这里就没时间了，就简单的标一下词性，然后填空空。<br>这题主要考察词汇量和语法 放在最后做。</p><ol><li>阅读空格当句的内容</li><li>选择词性正确、搭配得当的词语</li></ol><hr><p>感谢您的访问！希望您能喜欢我的博客内容。</p>]]></content>
      
      
      <categories>
          
          <category> 考试备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四六级 </tag>
            
            <tag> 考试备考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/posts/34d2.html"/>
      <url>/posts/34d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><p>欢迎来到我的个人博客！在这里，我将分享我的想法、经验和项目。</p><h2 id="最新文章"><a href="#最新文章" class="headerlink" title="最新文章"></a>最新文章</h2><ul><li><a href="posts/article1.md">文章标题1</a> - 2024年6月8日</li><li><a href="posts/article2.md">文章标题2</a> - 2024年6月7日</li><li><a href="posts/article3.md">文章标题3</a> - 2024年6月6日</li></ul><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我是一个热爱编程和写作的开发者。在这个博客中，我会分享我的编程经验、项目以及一些个人见解。<br><div class="tip success"><p>success</p></div><br><div class="tip home"><p>home</p></div><br><div class="tip home"><p>Hello</p></div><br><div class="tip home"><p>测试</p></div><br>这是一条测试信息。。。。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><a href="categories/programming.md">编程</a></li><li><a href="categories/life.md">生活</a></li><li><a href="categories/projects.md">项目</a></li></ul><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><ul><li>邮箱: example@example.com</li><li>GitHub: <a href="https://github.com/yourusername">我的GitHub</a></li><li>LinkedIn: <a href="https://www.linkedin.com/in/yourusername">我的LinkedIn</a></li></ul><hr><p>感谢您的访问！希望您能喜欢我的博客内容。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>DC</title>
      <link href="/DC/index.html"/>
      <url>/DC/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/wallpaper.jfif","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image%20(4).png","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image%20(2).png","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/image%20(3).png","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Gallery</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='https://whynotv.github.io/wallpaper/index.html'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='https://whynotv.github.io/marvel/index.html'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">DC</div>  <p>關於DC的圖片</p>  <a href='https://whynotv.github.io/DC/index.html'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/equipment.css"/>
      <url>/css/equipment.css</url>
      
        <content type="html"><![CDATA[#icat-equipment {  padding-bottom: 12px;}#icat-equipment > h2 {  margin: 20px 7px 0;}#icat-equipment .equipment-desc {  margin: 0 7px;  color: var(--icat-secondtext);}#icat-equipment .equipment {  display: flex;  flex-wrap: wrap;  padding: 10px 0 0;  gap: 16px;}#icat-equipment .equipment > .icat-equipment-box {  border: 1px solid var(--icat-secondbg);  background: var(--icat-card-bg);  width: calc(100% / 4 - 12px); /* 25% - 12px */  border-radius: 12px;  overflow: hidden;  min-height: 400px;  position: relative;}@media screen and (max-width: 1200px) {  #icat-equipment .equipment > .icat-equipment-box {    width: calc(100% / 2 - 12px); /* 50% - 12px */  }}@media screen and (max-width: 768px) {  #icat-equipment .equipment > .icat-equipment-box {    width: 100%;  }}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content {  padding: 16px;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-name {  color: var(--icat-fontcolor);  font-size: 18px;  font-weight: bold;  line-height: 1;  margin-bottom: 8px;  white-space: nowrap;  overflow: hidden;  text-overflow: ellipsis;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-custom {  font-size: 12px;  color: var(--icat-secondtext);  line-height: 1;  margin-bottom: 12px;  white-space: nowrap;  overflow: hidden;  text-overflow: ellipsis;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-opinion {  line-height: 20px;  color: var(--icat-secondtext);  height: 60px;  display: -webkit-box;  overflow: hidden;  -webkit-line-clamp: 3;  -webkit-box-orient: vertical;  margin-bottom: 16px;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-box-more {  display: flex;  justify-content: space-between;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-box-more a {  font-size: 12px;  background: var(--icat-gray-op);  color: var(--icat-fontcolor);  padding: 4px 12px;  border-radius: 6px;  letter-spacing: 1px;}#icat-equipment .equipment .icat-equipment-box .icat-equipment-content .icat-equipment-box-more a:hover {  color: var(--icat-white);  background: var(--icat-blue);  box-shadow: 0 8px 16px -4px var(--icat-black-op);}#icat-equipment .equipment .icat-equipment-box img {  min-width: 100%;  max-width: 100%;  height: 200px;  object-fit: cover;  animation: fadeIn 1s;  cursor: pointer;  transition: all .4s ease-in-out;}#icat-equipment .equipment .icat-equipment-box img:hover {  transform: scale(1.03);}@media screen and (max-width: 900px) {  #icat-equipment .equipment {    gap: 10px;  }  #icat-equipment .equipment > .icat-equipment-box {    width: calc(100% / 2 - 7px);  }}@media screen and (max-width: 768px) {  #icat-equipment .equipment {    gap: 8px;  }  #icat-equipment .equipment > .icat-equipment-box {    width: 100%;  }  #icat-equipment .equipment .icat-equipment-box img {    height: 220px; /* 220px改成auto了 */  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的装备</title>
      <link href="/equipment/index.html"/>
      <url>/equipment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {    var l,      h,      a,      t,      i,      v =        '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',      o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),      p = function (c, l) {        l.parentNode.insertBefore(c, l);      };    if (o && !c.__iconfont__svg__cssinject__) {      c.__iconfont__svg__cssinject__ = !0;      try {        document.write(          "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"        );      } catch (c) {        console && console.log(c);      }    }    function d() {      i || ((i = !0), a());    }    function m() {      try {        t.documentElement.doScroll("left");      } catch (c) {        return void setTimeout(m, 50);      }      d();    }    (l = function () {      var c,        l = document.createElement("div");      (l.innerHTML = v),        (v = null),        (l = l.getElementsByTagName("svg")[0]) &&          (l.setAttribute("aria-hidden", "true"),          (l.style.position = "absolute"),          (l.style.width = 0),          (l.style.height = 0),          (l.style.overflow = "hidden"),          (l = l),          (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));    }),      document.addEventListener        ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)          ? setTimeout(l, 0)          : ((h = function () {              document.removeEventListener("DOMContentLoaded", h, !1), l();            }),            document.addEventListener("DOMContentLoaded", h, !1))        : document.attachEvent &&          ((a = l),          (t = c.document),          (i = !1),          m(),          (t.onreadystatechange = function () {            "complete" == t.readyState && ((t.onreadystatechange = null), d());          }));  })(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="/wallpaper/index.html"/>
      <url>/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/bizhi.jpg","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6p3.png","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6p2.png","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6p1.png","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>marvel</title>
      <link href="/marvel/index.html"/>
      <url>/marvel/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/spiderman.jpg","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/the_amazing_spider_man-053.jpg","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/Snipaste_2024-06-17_09-07-18.png","alt":""},{"url":"https://raw.githubusercontent.com/WhynotV/tuchuang/main/img/Snipaste_2024-06-17_09-08-24.png","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /* 文章页H1-H6图标样式效果 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 1.6s linear infinite;  animation: ccc 1.6s linear infinite;}@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: #3b70fc;}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: #3b70fc;  -webkit-animation: ccc 3.2s linear infinite;  animation: ccc 3.2s linear infinite;}/* 页面设置icon转动速度调整 */#rightside_config i.fas.fa-cog.fa-spin {  animation: fa-spin 5s linear infinite;}/* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}#aside-content .aside-list > .aside-list-item .content > time {  display: none;}#aside-content .aside-list > .aside-list-item .content > .title {  -webkit-line-clamp: 3;  font-weight: 700;  padding: 2px 0;}#aside-content .aside-list > .aside-list-item {  padding: 8px;  padding-top: 6px !important;  padding-bottom: 6px !important;  border-radius: 12px;  transition: 0.3s;  margin: 4px 0;  cursor: pointer;}@media screen and (min-width: 1300px) {  #aside-content .aside-list > .aside-list-item:hover {    transform: scale(1.03);  }  #aside-content .aside-list > .aside-list-item:active {    transform: scale(0.97);  }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {  transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {  border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {  border-radius: 8px;  border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {  background: var(--anzhiyu-blue-main);  color: var(--anzhiyu-white);  transition: 0.3s;  box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {  color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {  padding: 0.4rem 0.6rem !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("06/08/2024 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='/img/badge/咕咕-认真学习中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='/img/badge/咕咕-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var t = new Date("06/08/2024 00:00:00");  now.setTime(now.getTime() + 250);  var e = (now - t) / 1e3 / 60 / 60 / 24,    a = Math.floor(e),    n = (now - t) / 1e3 / 60 / 60 - 24 * a,    r = Math.floor(n);  1 == String(r).length && (r = "0" + r);  var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r,    i = Math.floor(s);  1 == String(i).length && (i = "0" + i);  var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i,    l = Math.round(o);  1 == String(l).length && (l = "0" + l);  let g = "";  (g =    r < 18 && r >= 9      ? `<img class='boardsign' src='/img/badge/咕咕-认真学习中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `<img class='boardsign' src='/img/badge/咕咕-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") &&      (document.getElementById("workboard").innerHTML = g);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
  
</search>
